{
  "seaborn.algorithms.bootstrap": {
    "name": "seaborn_algorithms_bootstrap",
    "description": "Resample one or more arrays with replacement and store aggregate values.\nPositional arguments are a sequence of arrays to bootstrap along the first\naxis and pass to a summary function.\nKeyword arguments:\nn_boot : int, default=10000\nNumber of iterations\naxis : int, default=None\nWill pass axis to ``func`` as a keyword argument.\nunits : array, default=None\nArray of sampling unit IDs. When used the bootstrap resamples units\nand then observations within units instead of individual\ndatapoints.\nfunc : string or callable, default=\"mean\"\nFunction to call on the args that are passed in. If string, uses as\nname of function in the numpy namespace. If nans are present in the\ndata, will try to use nan-aware version of named function.\nseed : Generator | SeedSequence | RandomState | int | None\nSeed for the random number generator; useful if you want\nreproducible resamples.\nReturns\n-------\nboot_dist: array\narray of bootstrapped statistic values",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.algorithms.bootstrap",
      "module": "seaborn.algorithms",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.jointplot": {
    "name": "seaborn_axisgrid_jointplot",
    "description": "Draw a plot of two variables with bivariate and univariate graphs.\nThis function provides a convenient interface to the :class:`JointGrid`\nclass, with several canned plot kinds. This is intended to be a fairly\nlightweight wrapper; if you need more flexibility, you should use\n:class:`JointGrid` directly.\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\nInput data structure. Either a long-form collection of vectors that can be\nassigned to named variables or a wide-form dataset that will be internally\nreshaped.\nx, y : vectors or keys in ``data``\nVariables that specify positions on the x and y axes.\nhue : vector or key in ``data``\nSemantic variable that is mapped to determine the color of plot elements.\nSemantic variable that is mapped to determine the color of plot elements.\nkind : { \"scatter\" | \"kde\" | \"hist\" | \"hex\" | \"reg\" | \"resid\" }\nKind of plot to draw. See the examples for references to the underlying functions.\nheight : numeric\nSize of the figure (it will be square).\nratio : numeric\nRatio of joint axes height to marginal axes height.\nspace : numeric\nSpace between the joint and marginal axes\ndropna : bool\nIf True, remove observations that are missing from ``x`` and ``y``.\n{x, y}lim : pairs of numbers\nAxis limits to set before plotting.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\nSingle color specification for when hue mapping is not used. Otherwise, the\nplot will try to hook into the matplotlib property cycle.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\nMethod for choosing the colors to use when mapping the ``hue`` semantic.\nString values are passed to :func:`color_palette`. List or dict values\nimply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\nSpecify the order of processing and plotting for categorical levels of the\n``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\nEither a pair of values that set the normalization range in data units\nor an object that will map from data units into a [0, 1] interval. Usage\nimplies numeric mapping.\nmarginal_ticks : bool\nIf False, suppress ticks on the count/density axis of the marginal plots.\n{joint, marginal}_kws : dicts\nAdditional keyword arguments for the plot components.\nkwargs\nAdditional keyword arguments are passed to the function used to\ndraw the plot on the joint Axes, superseding items in the\n``joint_kws`` dictionary.\nReturns\n-------\n:class:`JointGrid`\nAn object managing multiple subplots that correspond to joint and marginal axes\nfor plotting a bivariate relationship or distribution.\nSee Also\n--------\nJointGrid : Set up a figure with joint and marginal views on bivariate data.\nPairGrid : Set up a figure with joint and marginal views on multiple variables.\njointplot : Draw multiple bivariate plots with univariate marginal distributions.\nExamples\n--------\n.. include:: ../docstrings/jointplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kind": {
          "type": "string",
          "default": "scatter",
          "description": "类型从默认值推断: str"
        },
        "height": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "ratio": {
          "type": "integer",
          "default": 5,
          "description": "类型从默认值推断: int"
        },
        "space": {
          "type": "number",
          "default": 0.2,
          "description": "类型从默认值推断: float"
        },
        "dropna": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "xlim": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "ylim": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_norm": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "marginal_ticks": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "joint_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "marginal_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.jointplot",
      "module": "seaborn.axisgrid",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.pairplot": {
    "name": "seaborn_axisgrid_pairplot",
    "description": "Plot pairwise relationships in a dataset.\nBy default, this function will create a grid of Axes such that each numeric\nvariable in ``data`` will by shared across the y-axes across a single row and\nthe x-axes across a single column. The diagonal plots are treated\ndifferently: a univariate distribution plot is drawn to show the marginal\ndistribution of the data in each column.\nIt is also possible to show a subset of variables or plot different\nvariables on the rows and columns.\nThis is a high-level interface for :class:`PairGrid` that is intended to\nmake it easy to draw a few common styles. You should use :class:`PairGrid`\ndirectly if you need more flexibility.\nParameters\n----------\ndata : `pandas.DataFrame`\nTidy (long-form) dataframe where each column is a variable and\neach row is an observation.\nhue : name of variable in ``data``\nVariable in ``data`` to map plot aspects to different colors.\nhue_order : list of strings\nOrder for the levels of the hue variable in the palette\npalette : dict or seaborn color palette\nSet of colors for mapping the ``hue`` variable. If a dict, keys\nshould be values  in the ``hue`` variable.\nvars : list of variable names\nVariables within ``data`` to use, otherwise use every column with\na numeric datatype.\n{x, y}_vars : lists of variable names\nVariables within ``data`` to use separately for the rows and\ncolumns of the figure; i.e. to make a non-square plot.\nkind : {'scatter', 'kde', 'hist', 'reg'}\nKind of plot to make.\ndiag_kind : {'auto', 'hist', 'kde', None}\nKind of plot for the diagonal subplots. If 'auto', choose based on\nwhether or not ``hue`` is used.\nmarkers : single matplotlib marker code or list\nEither the marker to use for all scatterplot points or a list of markers\nwith a length the same as the number of levels in the hue variable so that\ndifferently colored points will also have different scatterplot\nmarkers.\nheight : scalar\nHeight (in inches) of each facet.\naspect : scalar\nAspect * height gives the width (in inches) of each facet.\ncorner : bool\nIf True, don't add axes to the upper (off-diagonal) triangle of the\ngrid, making this a \"corner\" plot.\ndropna : boolean\nDrop missing values from the data before plotting.\n{plot, diag, grid}_kws : dicts\nDictionaries of keyword arguments. ``plot_kws`` are passed to the\nbivariate plotting function, ``diag_kws`` are passed to the univariate\nplotting function, and ``grid_kws`` are passed to the :class:`PairGrid`\nconstructor.\nReturns\n-------\ngrid : :class:`PairGrid`\nReturns the underlying :class:`PairGrid` instance for further tweaking.\nSee Also\n--------\nPairGrid : Subplot grid for more flexible plotting of pairwise relationships.\nJointGrid : Grid for plotting joint and marginal distributions of two variables.\nExamples\n--------\n.. include:: ../docstrings/pairplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "vars": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "x_vars": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y_vars": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kind": {
          "type": "string",
          "default": "scatter",
          "description": "类型从默认值推断: str"
        },
        "diag_kind": {
          "type": "string",
          "default": "auto",
          "description": "类型从默认值推断: str"
        },
        "markers": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "height": {
          "type": "number",
          "default": 2.5,
          "description": "类型从默认值推断: float"
        },
        "aspect": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        },
        "corner": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "dropna": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "plot_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "diag_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "grid_kws": {
          "type": "integer",
          "description": "类型从参数名推断: grid_kws"
        },
        "size": {
          "type": "integer",
          "description": "类型从参数名推断: size"
        }
      },
      "required": [
        "data"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.pairplot",
      "module": "seaborn.axisgrid",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.add_legend": {
    "name": "seaborn_axisgrid_FacetGrid_add_legend",
    "description": "Draw a legend, maybe placing it outside axes and resizing the figure.\nParameters\n----------\nlegend_data : dict\nDictionary mapping label names (or two-element tuples where the\nsecond element is a label name) to matplotlib artist handles. The\ndefault reads from ``self._legend_data``.\ntitle : string\nTitle for the legend. The default reads from ``self._hue_var``.\nlabel_order : list of labels\nThe order that the legend entries should appear in. The default\nreads from ``self.hue_names``.\nadjust_subtitles : bool\nIf True, modify entries with invisible artists to left-align\nthe labels and set the font size to that of a title.\nkwargs : key, value pairings\nOther keyword arguments are passed to the underlying legend methods\non the Figure or Axes object.\nReturns\n-------\nself : Grid instance\nReturns self for easy chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "legend_data": {
          "type": "object",
          "description": "类型从参数名推断: legend_data"
        },
        "title": {
          "type": "string",
          "description": "类型从参数名推断: title"
        },
        "label_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "adjust_subtitles": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.add_legend",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.apply": {
    "name": "seaborn_axisgrid_FacetGrid_apply",
    "description": "Pass the grid to a user-supplied function and return self.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.apply",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.despine": {
    "name": "seaborn_axisgrid_FacetGrid_despine",
    "description": "Remove axis spines from the facets.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.despine",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.facet_axis": {
    "name": "seaborn_axisgrid_FacetGrid_facet_axis",
    "description": "Make the axis identified by these indices active and return it.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "row_i": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "col_j": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "modify_state": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": [
        "row_i",
        "col_j"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.facet_axis",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.facet_data": {
    "name": "seaborn_axisgrid_FacetGrid_facet_data",
    "description": "Generator for name indices and data subsets for each facet.\nYields\n------\n(i, j, k), data_ijk : tuple of ints, DataFrame\nThe ints provide an index into the {row, col, hue}_names attribute,\nand the dataframe contains a subset of the full data corresponding\nto each facet. The generator yields subsets that correspond with\nthe self.axes.flat iterator, or self.axes[i, j] when `col_wrap`\nis None.",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.facet_data",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.map": {
    "name": "seaborn_axisgrid_FacetGrid_map",
    "description": "Apply a plotting function to each facet's subset of the data.\nParameters\n----------\nfunc : callable\nA plotting function that takes data and keyword arguments. It\nmust plot to the currently active matplotlib Axes and take a\n`color` keyword argument. If faceting on the `hue` dimension,\nit must also take a `label` keyword argument.\nargs : strings\nColumn names in self.data that identify variables with data to\nplot. The data for each variable is passed to `func` in the\norder the variables are specified in the call.\nkwargs : keyword arguments\nAll keyword arguments are passed to the plotting function.\nReturns\n-------\nself : object\nReturns self.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.map",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.map_dataframe": {
    "name": "seaborn_axisgrid_FacetGrid_map_dataframe",
    "description": "Like ``.map`` but passes args as strings and inserts data in kwargs.\nThis method is suitable for plotting with functions that accept a\nlong-form DataFrame as a `data` keyword argument and access the\ndata in that DataFrame using string variable names.\nParameters\n----------\nfunc : callable\nA plotting function that takes data and keyword arguments. Unlike\nthe `map` method, a function used here must \"understand\" Pandas\nobjects. It also must plot to the currently active matplotlib Axes\nand take a `color` keyword argument. If faceting on the `hue`\ndimension, it must also take a `label` keyword argument.\nargs : strings\nColumn names in self.data that identify variables with data to\nplot. The data for each variable is passed to `func` in the\norder the variables are specified in the call.\nkwargs : keyword arguments\nAll keyword arguments are passed to the plotting function.\nReturns\n-------\nself : object\nReturns self.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.map_dataframe",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.pipe": {
    "name": "seaborn_axisgrid_FacetGrid_pipe",
    "description": "Pass the grid to a user-supplied function and return its value.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.pipe",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.refline": {
    "name": "seaborn_axisgrid_FacetGrid_refline",
    "description": "Add a reference line(s) to each facet.\nParameters\n----------\nx, y : numeric\nValue(s) to draw the line(s) at.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\nSpecifies the color of the reference line(s). Pass ``color=None`` to\nuse ``hue`` mapping.\nlinestyle : str\nSpecifies the style of the reference line(s).\nline_kws : key, value mappings\nOther keyword arguments are passed to :meth:`matplotlib.axes.Axes.axvline`\nwhen ``x`` is not None and :meth:`matplotlib.axes.Axes.axhline` when ``y``\nis not None.\nReturns\n-------\n:class:`FacetGrid` instance\nReturns ``self`` for easy method chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "default": ".5",
          "description": "类型从默认值推断: str"
        },
        "linestyle": {
          "type": "string",
          "default": "--",
          "description": "类型从默认值推断: str"
        },
        "line_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "line_kws"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.refline",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.savefig": {
    "name": "seaborn_axisgrid_FacetGrid_savefig",
    "description": "Save an image of the plot.\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.savefig",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.set": {
    "name": "seaborn_axisgrid_FacetGrid_set",
    "description": "Set attributes on each subplot Axes.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.set",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.set_axis_labels": {
    "name": "seaborn_axisgrid_FacetGrid_set_axis_labels",
    "description": "Set axis labels on the left column and bottom row of the grid.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "x_var": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y_var": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "clear_inner": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.set_axis_labels",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.set_titles": {
    "name": "seaborn_axisgrid_FacetGrid_set_titles",
    "description": "Draw titles either above each facet or on the grid margins.\nParameters\n----------\ntemplate : string\nTemplate for all titles with the formatting keys {col_var} and\n{col_name} (if using a `col` faceting variable) and/or {row_var}\nand {row_name} (if using a `row` faceting variable).\nrow_template:\nTemplate for the row variable when titles are drawn on the grid\nmargins. Must have {row_var} and {row_name} formatting keys.\ncol_template:\nTemplate for the column variable when titles are drawn on the grid\nmargins. Must have {col_var} and {col_name} formatting keys.\nReturns\n-------\nself: object\nReturns self.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "template": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "row_template": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "col_template": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.set_titles",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.set_xlabels": {
    "name": "seaborn_axisgrid_FacetGrid_set_xlabels",
    "description": "Label the x axis on the bottom row of the grid.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "clear_inner": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.set_xlabels",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.set_xticklabels": {
    "name": "seaborn_axisgrid_FacetGrid_set_xticklabels",
    "description": "Set x axis tick labels of the grid.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "step": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.set_xticklabels",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.set_ylabels": {
    "name": "seaborn_axisgrid_FacetGrid_set_ylabels",
    "description": "Label the y axis on the left column of the grid.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "clear_inner": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.set_ylabels",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.set_yticklabels": {
    "name": "seaborn_axisgrid_FacetGrid_set_yticklabels",
    "description": "Set y axis tick labels on the left column of the grid.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.set_yticklabels",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.tick_params": {
    "name": "seaborn_axisgrid_FacetGrid_tick_params",
    "description": "Modify the ticks, tick labels, and gridlines.\nParameters\n----------\naxis : {'x', 'y', 'both'}\nThe axis on which to apply the formatting.\nkwargs : keyword arguments\nAdditional keyword arguments to pass to\n:meth:`matplotlib.axes.Axes.tick_params`.\nReturns\n-------\nself : Grid instance\nReturns self for easy chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "default": "both",
          "description": "类型从默认值推断: str"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.tick_params",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.FacetGrid.tight_layout": {
    "name": "seaborn_axisgrid_FacetGrid_tight_layout",
    "description": "Call fig.tight_layout within rect that exclude the legend.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.FacetGrid.tight_layout",
      "module": "seaborn.axisgrid",
      "class_name": "FacetGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.Grid.add_legend": {
    "name": "seaborn_axisgrid_Grid_add_legend",
    "description": "Draw a legend, maybe placing it outside axes and resizing the figure.\nParameters\n----------\nlegend_data : dict\nDictionary mapping label names (or two-element tuples where the\nsecond element is a label name) to matplotlib artist handles. The\ndefault reads from ``self._legend_data``.\ntitle : string\nTitle for the legend. The default reads from ``self._hue_var``.\nlabel_order : list of labels\nThe order that the legend entries should appear in. The default\nreads from ``self.hue_names``.\nadjust_subtitles : bool\nIf True, modify entries with invisible artists to left-align\nthe labels and set the font size to that of a title.\nkwargs : key, value pairings\nOther keyword arguments are passed to the underlying legend methods\non the Figure or Axes object.\nReturns\n-------\nself : Grid instance\nReturns self for easy chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "legend_data": {
          "type": "object",
          "description": "类型从参数名推断: legend_data"
        },
        "title": {
          "type": "string",
          "description": "类型从参数名推断: title"
        },
        "label_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "adjust_subtitles": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.Grid.add_legend",
      "module": "seaborn.axisgrid",
      "class_name": "Grid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.Grid.apply": {
    "name": "seaborn_axisgrid_Grid_apply",
    "description": "Pass the grid to a user-supplied function and return self.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.Grid.apply",
      "module": "seaborn.axisgrid",
      "class_name": "Grid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.Grid.pipe": {
    "name": "seaborn_axisgrid_Grid_pipe",
    "description": "Pass the grid to a user-supplied function and return its value.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.Grid.pipe",
      "module": "seaborn.axisgrid",
      "class_name": "Grid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.Grid.savefig": {
    "name": "seaborn_axisgrid_Grid_savefig",
    "description": "Save an image of the plot.\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.Grid.savefig",
      "module": "seaborn.axisgrid",
      "class_name": "Grid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.Grid.set": {
    "name": "seaborn_axisgrid_Grid_set",
    "description": "Set attributes on each subplot Axes.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.Grid.set",
      "module": "seaborn.axisgrid",
      "class_name": "Grid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.Grid.tick_params": {
    "name": "seaborn_axisgrid_Grid_tick_params",
    "description": "Modify the ticks, tick labels, and gridlines.\nParameters\n----------\naxis : {'x', 'y', 'both'}\nThe axis on which to apply the formatting.\nkwargs : keyword arguments\nAdditional keyword arguments to pass to\n:meth:`matplotlib.axes.Axes.tick_params`.\nReturns\n-------\nself : Grid instance\nReturns self for easy chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "default": "both",
          "description": "类型从默认值推断: str"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.Grid.tick_params",
      "module": "seaborn.axisgrid",
      "class_name": "Grid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.Grid.tight_layout": {
    "name": "seaborn_axisgrid_Grid_tight_layout",
    "description": "Call fig.tight_layout within rect that exclude the legend.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.Grid.tight_layout",
      "module": "seaborn.axisgrid",
      "class_name": "Grid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.apply": {
    "name": "seaborn_axisgrid_JointGrid_apply",
    "description": "Pass the grid to a user-supplied function and return self.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.apply",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.pipe": {
    "name": "seaborn_axisgrid_JointGrid_pipe",
    "description": "Pass the grid to a user-supplied function and return its value.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.pipe",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.plot": {
    "name": "seaborn_axisgrid_JointGrid_plot",
    "description": "Draw the plot by passing functions for joint and marginal axes.\nThis method passes the ``kwargs`` dictionary to both functions. If you\nneed more control, call :meth:`JointGrid.plot_joint` and\n:meth:`JointGrid.plot_marginals` directly with specific parameters.\nParameters\n----------\njoint_func, marginal_func : callables\nFunctions to draw the bivariate and univariate plots. See methods\nreferenced above for information about the required characteristics\nof these functions.\nkwargs\nAdditional keyword arguments are passed to both functions.\nReturns\n-------\n:class:`JointGrid` instance\nReturns ``self`` for easy method chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "joint_func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "marginal_func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "joint_func",
        "marginal_func",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.plot",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.plot_joint": {
    "name": "seaborn_axisgrid_JointGrid_plot_joint",
    "description": "Draw a bivariate plot on the joint axes of the grid.\nParameters\n----------\nfunc : plotting callable\nIf a seaborn function, it should accept ``x`` and ``y``. Otherwise,\nit must accept ``x`` and ``y`` vectors of data as the first two\npositional arguments, and it must plot on the \"current\" axes.\nIf ``hue`` was defined in the class constructor, the function must\naccept ``hue`` as a parameter.\nkwargs\nKeyword argument are passed to the plotting function.\nReturns\n-------\n:class:`JointGrid` instance\nReturns ``self`` for easy method chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.plot_joint",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.plot_marginals": {
    "name": "seaborn_axisgrid_JointGrid_plot_marginals",
    "description": "Draw univariate plots on each marginal axes.\nParameters\n----------\nfunc : plotting callable\nIf a seaborn function, it should  accept ``x`` and ``y`` and plot\nwhen only one of them is defined. Otherwise, it must accept a vector\nof data as the first positional argument and determine its orientation\nusing the ``vertical`` parameter, and it must plot on the \"current\" axes.\nIf ``hue`` was defined in the class constructor, it must accept ``hue``\nas a parameter.\nkwargs\nKeyword argument are passed to the plotting function.\nReturns\n-------\n:class:`JointGrid` instance\nReturns ``self`` for easy method chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.plot_marginals",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.refline": {
    "name": "seaborn_axisgrid_JointGrid_refline",
    "description": "Add a reference line(s) to joint and/or marginal axes.\nParameters\n----------\nx, y : numeric\nValue(s) to draw the line(s) at.\njoint, marginal : bools\nWhether to add the reference line(s) to the joint/marginal axes.\ncolor : :mod:`matplotlib color <matplotlib.colors>`\nSpecifies the color of the reference line(s).\nlinestyle : str\nSpecifies the style of the reference line(s).\nline_kws : key, value mappings\nOther keyword arguments are passed to :meth:`matplotlib.axes.Axes.axvline`\nwhen ``x`` is not None and :meth:`matplotlib.axes.Axes.axhline` when ``y``\nis not None.\nReturns\n-------\n:class:`JointGrid` instance\nReturns ``self`` for easy method chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "default": ".5",
          "description": "类型从默认值推断: str"
        },
        "linestyle": {
          "type": "string",
          "default": "--",
          "description": "类型从默认值推断: str"
        },
        "line_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "line_kws"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.refline",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.savefig": {
    "name": "seaborn_axisgrid_JointGrid_savefig",
    "description": "Save an image of the plot.\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.savefig",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.set": {
    "name": "seaborn_axisgrid_JointGrid_set",
    "description": "Set attributes on each subplot Axes.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.set",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.JointGrid.set_axis_labels": {
    "name": "seaborn_axisgrid_JointGrid_set_axis_labels",
    "description": "Set axis labels on the bivariate axes.\nParameters\n----------\nxlabel, ylabel : strings\nLabel names for the x and y variables.\nkwargs : key, value mappings\nOther keyword arguments are passed to the following functions:\n- :meth:`matplotlib.axes.Axes.set_xlabel`\n- :meth:`matplotlib.axes.Axes.set_ylabel`\nReturns\n-------\n:class:`JointGrid` instance\nReturns ``self`` for easy method chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "x_var": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y_var": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "clear_inner": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.JointGrid.set_axis_labels",
      "module": "seaborn.axisgrid",
      "class_name": "JointGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.add_legend": {
    "name": "seaborn_axisgrid_PairGrid_add_legend",
    "description": "Draw a legend, maybe placing it outside axes and resizing the figure.\nParameters\n----------\nlegend_data : dict\nDictionary mapping label names (or two-element tuples where the\nsecond element is a label name) to matplotlib artist handles. The\ndefault reads from ``self._legend_data``.\ntitle : string\nTitle for the legend. The default reads from ``self._hue_var``.\nlabel_order : list of labels\nThe order that the legend entries should appear in. The default\nreads from ``self.hue_names``.\nadjust_subtitles : bool\nIf True, modify entries with invisible artists to left-align\nthe labels and set the font size to that of a title.\nkwargs : key, value pairings\nOther keyword arguments are passed to the underlying legend methods\non the Figure or Axes object.\nReturns\n-------\nself : Grid instance\nReturns self for easy chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "legend_data": {
          "type": "object",
          "description": "类型从参数名推断: legend_data"
        },
        "title": {
          "type": "string",
          "description": "类型从参数名推断: title"
        },
        "label_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "adjust_subtitles": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.add_legend",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.apply": {
    "name": "seaborn_axisgrid_PairGrid_apply",
    "description": "Pass the grid to a user-supplied function and return self.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.apply",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.map": {
    "name": "seaborn_axisgrid_PairGrid_map",
    "description": "Plot with the same function in every subplot.\nParameters\n----------\nfunc : callable plotting function\nMust take x, y arrays as positional arguments and draw onto the\n\"currently active\" matplotlib Axes. Also needs to accept kwargs\ncalled ``color`` and  ``label``.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.map",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.map_diag": {
    "name": "seaborn_axisgrid_PairGrid_map_diag",
    "description": "Plot with a univariate function on each diagonal subplot.\nParameters\n----------\nfunc : callable plotting function\nMust take an x array as a positional argument and draw onto the\n\"currently active\" matplotlib Axes. Also needs to accept kwargs\ncalled ``color`` and  ``label``.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.map_diag",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.map_lower": {
    "name": "seaborn_axisgrid_PairGrid_map_lower",
    "description": "Plot with a bivariate function on the lower diagonal subplots.\nParameters\n----------\nfunc : callable plotting function\nMust take x, y arrays as positional arguments and draw onto the\n\"currently active\" matplotlib Axes. Also needs to accept kwargs\ncalled ``color`` and  ``label``.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.map_lower",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.map_offdiag": {
    "name": "seaborn_axisgrid_PairGrid_map_offdiag",
    "description": "Plot with a bivariate function on the off-diagonal subplots.\nParameters\n----------\nfunc : callable plotting function\nMust take x, y arrays as positional arguments and draw onto the\n\"currently active\" matplotlib Axes. Also needs to accept kwargs\ncalled ``color`` and  ``label``.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.map_offdiag",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.map_upper": {
    "name": "seaborn_axisgrid_PairGrid_map_upper",
    "description": "Plot with a bivariate function on the upper diagonal subplots.\nParameters\n----------\nfunc : callable plotting function\nMust take x, y arrays as positional arguments and draw onto the\n\"currently active\" matplotlib Axes. Also needs to accept kwargs\ncalled ``color`` and  ``label``.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.map_upper",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.pipe": {
    "name": "seaborn_axisgrid_PairGrid_pipe",
    "description": "Pass the grid to a user-supplied function and return its value.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.pipe",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.savefig": {
    "name": "seaborn_axisgrid_PairGrid_savefig",
    "description": "Save an image of the plot.\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.savefig",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.set": {
    "name": "seaborn_axisgrid_PairGrid_set",
    "description": "Set attributes on each subplot Axes.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.set",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.tick_params": {
    "name": "seaborn_axisgrid_PairGrid_tick_params",
    "description": "Modify the ticks, tick labels, and gridlines.\nParameters\n----------\naxis : {'x', 'y', 'both'}\nThe axis on which to apply the formatting.\nkwargs : keyword arguments\nAdditional keyword arguments to pass to\n:meth:`matplotlib.axes.Axes.tick_params`.\nReturns\n-------\nself : Grid instance\nReturns self for easy chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "default": "both",
          "description": "类型从默认值推断: str"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.tick_params",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.axisgrid.PairGrid.tight_layout": {
    "name": "seaborn_axisgrid_PairGrid_tight_layout",
    "description": "Call fig.tight_layout within rect that exclude the legend.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.axisgrid.PairGrid.tight_layout",
      "module": "seaborn.axisgrid",
      "class_name": "PairGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.boxplot": {
    "name": "seaborn_categorical_boxplot",
    "description": "Draw a box plot to show distributions with respect to categories.\nA box plot (or box-and-whisker plot) shows the distribution of quantitative\ndata in a way that facilitates comparisons between variables or across\nlevels of a categorical variable. The box shows the quartiles of the\ndataset while the whiskers extend to show the rest of the distribution,\nexcept for points that are determined to be \"outliers\" using a method\nthat is a function of the inter-quartile range.\n.. note::\nThis function always treats one of the variables as categorical and\ndraws data at ordinal positions (0, 1, ... n) on the relevant axis,\neven when the data has a numeric or date type.\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\nParameters\n----------\ndata : DataFrame, array, or list of arrays, optional\nDataset for plotting. If ``x`` and ``y`` are absent, this is\ninterpreted as wide-form. Otherwise it is expected to be long-form.\nx, y, hue : names of variables in ``data`` or vector data, optional\nInputs for plotting long-form data. See examples for interpretation.\norder, hue_order : lists of strings, optional\nOrder to plot the categorical levels in; otherwise the levels are\ninferred from the data objects.\norient : \"v\" | \"h\", optional\nOrientation of the plot (vertical or horizontal). This is usually\ninferred based on the type of the input variables, but it can be used\nto resolve ambiguity when both `x` and `y` are numeric or when\nplotting wide-form data.\ncolor : matplotlib color, optional\nSingle color for the elements in the plot.\npalette : palette name, list, or dict\nColors to use for the different levels of the ``hue`` variable. Should\nbe something that can be interpreted by :func:`color_palette`, or a\ndictionary mapping hue levels to matplotlib colors.\nsaturation : float, optional\nProportion of the original saturation to draw colors at. Large patches\noften look better with slightly desaturated colors, but set this to\n`1` if you want the plot colors to perfectly match the input color.\nwidth : float, optional\nWidth of a full element when not using hue nesting, or width of all the\nelements for one level of the major grouping variable.\ndodge : bool, optional\nWhen hue nesting is used, whether elements should be shifted along the\ncategorical axis.\nfliersize : float, optional\nSize of the markers used to indicate outlier observations.\nlinewidth : float, optional\nWidth of the gray lines that frame the plot elements.\nwhis : float, optional\nMaximum length of the plot whiskers as proportion of the\ninterquartile range. Whiskers extend to the furthest datapoint\nwithin that range. More extreme points are marked as outliers.\nax : matplotlib Axes, optional\nAxes object to draw the plot onto, otherwise uses the current Axes.\nkwargs : key, value mappings\nOther keyword arguments are passed through to\n:meth:`matplotlib.axes.Axes.boxplot`.\nReturns\n-------\nax : matplotlib Axes\nReturns the Axes object with the plot drawn onto it.\nSee Also\n--------\nviolinplot : A combination of boxplot and kernel density estimation.\nstripplot : A scatterplot where one variable is categorical. Can be used\nin conjunction with other plots to show each observation.\nswarmplot : A categorical scatterplot where the points do not overlap. Can\nbe used with other plots to show each observation.\ncatplot : Combine a categorical plot with a :class:`FacetGrid`.\nExamples\n--------\n.. include:: ../docstrings/boxplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "orient": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "saturation": {
          "type": "number",
          "default": 0.75,
          "description": "类型从默认值推断: float"
        },
        "width": {
          "type": "number",
          "default": 0.8,
          "description": "类型从默认值推断: float"
        },
        "dodge": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "fliersize": {
          "type": "integer",
          "default": 5,
          "description": "类型从默认值推断: int"
        },
        "linewidth": {
          "type": "integer",
          "description": "类型从参数名推断: linewidth"
        },
        "whis": {
          "type": "number",
          "default": 1.5,
          "description": "类型从默认值推断: float"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.boxplot",
      "module": "seaborn.categorical",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.countplot": {
    "name": "seaborn_categorical_countplot",
    "description": "Show the counts of observations in each categorical bin using bars.\nA count plot can be thought of as a histogram across a categorical, instead\nof quantitative, variable. The basic API and options are identical to those\nfor :func:`barplot`, so you can compare counts across nested variables.\nNote that the newer :func:`histplot` function offers more functionality, although\nits default behavior is somewhat different.\n.. note::\nThis function always treats one of the variables as categorical and\ndraws data at ordinal positions (0, 1, ... n) on the relevant axis,\neven when the data has a numeric or date type.\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\nParameters\n----------\ndata : DataFrame, array, or list of arrays, optional\nDataset for plotting. If ``x`` and ``y`` are absent, this is\ninterpreted as wide-form. Otherwise it is expected to be long-form.\nx, y, hue : names of variables in ``data`` or vector data, optional\nInputs for plotting long-form data. See examples for interpretation.\norder, hue_order : lists of strings, optional\nOrder to plot the categorical levels in; otherwise the levels are\ninferred from the data objects.\norient : \"v\" | \"h\", optional\nOrientation of the plot (vertical or horizontal). This is usually\ninferred based on the type of the input variables, but it can be used\nto resolve ambiguity when both `x` and `y` are numeric or when\nplotting wide-form data.\ncolor : matplotlib color, optional\nSingle color for the elements in the plot.\npalette : palette name, list, or dict\nColors to use for the different levels of the ``hue`` variable. Should\nbe something that can be interpreted by :func:`color_palette`, or a\ndictionary mapping hue levels to matplotlib colors.\nsaturation : float, optional\nProportion of the original saturation to draw colors at. Large patches\noften look better with slightly desaturated colors, but set this to\n`1` if you want the plot colors to perfectly match the input color.\ndodge : bool, optional\nWhen hue nesting is used, whether elements should be shifted along the\ncategorical axis.\nax : matplotlib Axes, optional\nAxes object to draw the plot onto, otherwise uses the current Axes.\nkwargs : key, value mappings\nOther keyword arguments are passed through to\n:meth:`matplotlib.axes.Axes.bar`.\nReturns\n-------\nax : matplotlib Axes\nReturns the Axes object with the plot drawn onto it.\nSee Also\n--------\nbarplot : Show point estimates and confidence intervals using bars.\ncatplot : Combine a categorical plot with a :class:`FacetGrid`.\nExamples\n--------\n.. include:: ../docstrings/countplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "orient": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "saturation": {
          "type": "number",
          "default": 0.75,
          "description": "类型从默认值推断: float"
        },
        "width": {
          "type": "number",
          "default": 0.8,
          "description": "类型从默认值推断: float"
        },
        "dodge": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.countplot",
      "module": "seaborn.categorical",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.stripplot": {
    "name": "seaborn_categorical_stripplot",
    "description": "Draw a categorical scatterplot using jitter to reduce overplotting.\nA strip plot can be drawn on its own, but it is also a good complement\nto a box or violin plot in cases where you want to show all observations\nalong with some representation of the underlying distribution.\n.. note::\nBy default, this function treats one of the variables as categorical\nand draws data at ordinal positions (0, 1, ... n) on the relevant axis.\nThis can be disabled with the `native_scale` parameter.\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\nParameters\n----------\nx, y, hue : names of variables in ``data`` or vector data, optional\nInputs for plotting long-form data. See examples for interpretation.\ndata : DataFrame, array, or list of arrays, optional\nDataset for plotting. If ``x`` and ``y`` are absent, this is\ninterpreted as wide-form. Otherwise it is expected to be long-form.\norder, hue_order : lists of strings, optional\nOrder to plot the categorical levels in; otherwise the levels are\ninferred from the data objects.\njitter : float, ``True``/``1`` is special-cased, optional\nAmount of jitter (only along the categorical axis) to apply. This\ncan be useful when you have many points and they overlap, so that\nit is easier to see the distribution. You can specify the amount\nof jitter (half the width of the uniform random variable support),\nor just use ``True`` for a good default.\ndodge : bool, optional\nWhen using ``hue`` nesting, setting this to ``True`` will separate\nthe strips for different hue levels along the categorical axis.\nOtherwise, the points for each level will be plotted on top of\neach other.\norient : \"v\" | \"h\", optional\nOrientation of the plot (vertical or horizontal). This is usually\ninferred based on the type of the input variables, but it can be used\nto resolve ambiguity when both `x` and `y` are numeric or when\nplotting wide-form data.\ncolor : matplotlib color, optional\nSingle color for the elements in the plot.\npalette : palette name, list, or dict\nColors to use for the different levels of the ``hue`` variable. Should\nbe something that can be interpreted by :func:`color_palette`, or a\ndictionary mapping hue levels to matplotlib colors.\nsize : float, optional\nRadius of the markers, in points.\nedgecolor : matplotlib color, \"gray\" is special-cased, optional\nColor of the lines around each point. If you pass ``\"gray\"``, the\nbrightness is determined by the color palette used for the body\nof the points. Note that `stripplot` has `linewidth=0` by default,\nso edge colors are only visible with nonzero line width.\nlinewidth : float, optional\nWidth of the gray lines that frame the plot elements.\nnative_scale : bool, optional\nWhen True, numeric or datetime values on the categorical axis will maintain\ntheir original scaling rather than being converted to fixed indices.\nformatter : callable, optional\nFunction for converting categorical data into strings. Affects both grouping\nand tick labels.\nlegend : \"auto\", \"brief\", \"full\", or False\nHow to draw the legend. If \"brief\", numeric `hue` and `size`\nvariables will be represented with a sample of evenly spaced values.\nIf \"full\", every group will get an entry in the legend. If \"auto\",\nchoose between brief or full representation based on number of levels.\nIf `False`, no legend data is added and no legend is drawn.\nax : matplotlib Axes, optional\nAxes object to draw the plot onto, otherwise uses the current Axes.\nkwargs : key, value mappings\nOther keyword arguments are passed through to\n:meth:`matplotlib.axes.Axes.scatter`.\nReturns\n-------\nax : matplotlib Axes\nReturns the Axes object with the plot drawn onto it.\nSee Also\n--------\nswarmplot : A categorical scatterplot where the points do not overlap. Can\nbe used with other plots to show each observation.\nboxplot : A traditional box-and-whisker plot with a similar API.\nviolinplot : A combination of boxplot and kernel density estimation.\ncatplot : Combine a categorical plot with a :class:`FacetGrid`.\nExamples\n--------\n.. include:: ../docstrings/stripplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "jitter": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "dodge": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "orient": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "size": {
          "type": "integer",
          "default": 5,
          "description": "类型从默认值推断: int"
        },
        "edgecolor": {
          "type": "string",
          "default": "gray",
          "description": "类型从默认值推断: str"
        },
        "linewidth": {
          "type": "integer",
          "default": 0,
          "description": "类型从默认值推断: int"
        },
        "hue_norm": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "native_scale": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "formatter": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "legend": {
          "type": "string",
          "default": "auto",
          "description": "类型从默认值推断: str"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.stripplot",
      "module": "seaborn.categorical",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.swarmplot": {
    "name": "seaborn_categorical_swarmplot",
    "description": "Draw a categorical scatterplot with points adjusted to be non-overlapping.\nThis function is similar to :func:`stripplot`, but the points are adjusted\n(only along the categorical axis) so that they don't overlap. This gives a\nbetter representation of the distribution of values, but it does not scale\nwell to large numbers of observations. This style of plot is sometimes\ncalled a \"beeswarm\".\nA swarm plot can be drawn on its own, but it is also a good complement\nto a box or violin plot in cases where you want to show all observations\nalong with some representation of the underlying distribution.\n.. note::\nBy default, this function treats one of the variables as categorical\nand draws data at ordinal positions (0, 1, ... n) on the relevant axis.\nThis can be disabled with the `native_scale` parameter.\nSee the :ref:`tutorial <categorical_tutorial>` for more information.\nParameters\n----------\ndata : DataFrame, array, or list of arrays, optional\nDataset for plotting. If ``x`` and ``y`` are absent, this is\ninterpreted as wide-form. Otherwise it is expected to be long-form.\nx, y, hue : names of variables in ``data`` or vector data, optional\nInputs for plotting long-form data. See examples for interpretation.\norder, hue_order : lists of strings, optional\nOrder to plot the categorical levels in; otherwise the levels are\ninferred from the data objects.\ndodge : bool, optional\nWhen using ``hue`` nesting, setting this to ``True`` will separate\nthe strips for different hue levels along the categorical axis.\nOtherwise, the points for each level will be plotted in one swarm.\norient : \"v\" | \"h\", optional\nOrientation of the plot (vertical or horizontal). This is usually\ninferred based on the type of the input variables, but it can be used\nto resolve ambiguity when both `x` and `y` are numeric or when\nplotting wide-form data.\ncolor : matplotlib color, optional\nSingle color for the elements in the plot.\npalette : palette name, list, or dict\nColors to use for the different levels of the ``hue`` variable. Should\nbe something that can be interpreted by :func:`color_palette`, or a\ndictionary mapping hue levels to matplotlib colors.\nsize : float, optional\nRadius of the markers, in points.\nedgecolor : matplotlib color, \"gray\" is special-cased, optional\nColor of the lines around each point. If you pass ``\"gray\"``, the\nbrightness is determined by the color palette used for the body\nof the points.\nlinewidth : float, optional\nWidth of the gray lines that frame the plot elements.\nnative_scale : bool, optional\nWhen True, numeric or datetime values on the categorical axis will maintain\ntheir original scaling rather than being converted to fixed indices.\nformatter : callable, optional\nFunction for converting categorical data into strings. Affects both grouping\nand tick labels.\nlegend : \"auto\", \"brief\", \"full\", or False\nHow to draw the legend. If \"brief\", numeric `hue` and `size`\nvariables will be represented with a sample of evenly spaced values.\nIf \"full\", every group will get an entry in the legend. If \"auto\",\nchoose between brief or full representation based on number of levels.\nIf `False`, no legend data is added and no legend is drawn.\nax : matplotlib Axes, optional\nAxes object to draw the plot onto, otherwise uses the current Axes.\nkwargs : key, value mappings\nOther keyword arguments are passed through to\n:meth:`matplotlib.axes.Axes.scatter`.\nReturns\n-------\nax : matplotlib Axes\nReturns the Axes object with the plot drawn onto it.\nSee Also\n--------\nboxplot : A traditional box-and-whisker plot with a similar API.\nviolinplot : A combination of boxplot and kernel density estimation.\nstripplot : A scatterplot where one variable is categorical. Can be used\nin conjunction with other plots to show each observation.\ncatplot : Combine a categorical plot with a :class:`FacetGrid`.\nExamples\n--------\n.. include:: ../docstrings/swarmplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "dodge": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "orient": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "size": {
          "type": "integer",
          "default": 5,
          "description": "类型从默认值推断: int"
        },
        "edgecolor": {
          "type": "string",
          "default": "gray",
          "description": "类型从默认值推断: str"
        },
        "linewidth": {
          "type": "integer",
          "default": 0,
          "description": "类型从默认值推断: int"
        },
        "hue_norm": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "native_scale": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "formatter": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "legend": {
          "type": "string",
          "default": "auto",
          "description": "类型从默认值推断: str"
        },
        "warn_thresh": {
          "type": "number",
          "default": 0.05,
          "description": "类型从默认值推断: float"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.swarmplot",
      "module": "seaborn.categorical",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.Beeswarm.add_gutters": {
    "name": "seaborn_categorical_Beeswarm_add_gutters",
    "description": "Stop points from extending beyond their territory.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "points": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "center": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "log_scale": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": [
        "points",
        "center"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.Beeswarm.add_gutters",
      "module": "seaborn.categorical",
      "class_name": "Beeswarm",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.Beeswarm.beeswarm": {
    "name": "seaborn_categorical_Beeswarm_beeswarm",
    "description": "Adjust x position of points to avoid overlaps.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "orig_xyr": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "orig_xyr"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.Beeswarm.beeswarm",
      "module": "seaborn.categorical",
      "class_name": "Beeswarm",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.Beeswarm.could_overlap": {
    "name": "seaborn_categorical_Beeswarm_could_overlap",
    "description": "Return a list of all swarm points that could overlap with target.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "xyr_i": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "swarm": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "xyr_i",
        "swarm"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.Beeswarm.could_overlap",
      "module": "seaborn.categorical",
      "class_name": "Beeswarm",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.Beeswarm.first_non_overlapping_candidate": {
    "name": "seaborn_categorical_Beeswarm_first_non_overlapping_candidate",
    "description": "Find the first candidate that does not overlap with the swarm.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "candidates": {
          "type": "integer",
          "description": "类型从参数名推断: candidates"
        },
        "neighbors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "candidates",
        "neighbors"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.Beeswarm.first_non_overlapping_candidate",
      "module": "seaborn.categorical",
      "class_name": "Beeswarm",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.categorical.Beeswarm.position_candidates": {
    "name": "seaborn_categorical_Beeswarm_position_candidates",
    "description": "Return a list of coordinates that might be valid by adjusting x.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "xyr_i": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "neighbors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "xyr_i",
        "neighbors"
      ]
    },
    "metadata": {
      "source_function": "seaborn.categorical.Beeswarm.position_candidates",
      "module": "seaborn.categorical",
      "class_name": "Beeswarm",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.distributions.distplot": {
    "name": "seaborn_distributions_distplot",
    "description": "DEPRECATED\nThis function has been deprecated and will be removed in seaborn v0.14.0.\nIt has been replaced by :func:`histplot` and :func:`displot`, two functions\nwith a modern API and many more capabilities.\nFor a guide to updating, please see this notebook:\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751",
    "inputSchema": {
      "type": "object",
      "properties": {
        "a": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "bins": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hist": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "kde": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "rug": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "fit": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hist_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kde_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "rug_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "fit_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "vertical": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "norm_hist": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "axlabel": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "label": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.distributions.distplot",
      "module": "seaborn.distributions",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.distributions.ecdfplot": {
    "name": "seaborn_distributions_ecdfplot",
    "description": "Plot empirical cumulative distribution functions.\nAn ECDF represents the proportion or count of observations falling below each\nunique value in a dataset. Compared to a histogram or density plot, it has the\nadvantage that each observation is visualized directly, meaning that there are\nno binning or smoothing parameters that need to be adjusted. It also aids direct\ncomparisons between multiple distributions. A downside is that the relationship\nbetween the appearance of the plot and the basic properties of the distribution\n(such as its central tendency, variance, and the presence of any bimodality)\nmay not be as intuitive.\nMore information is provided in the :ref:`user guide <tutorial_ecdf>`.\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\nInput data structure. Either a long-form collection of vectors that can be\nassigned to named variables or a wide-form dataset that will be internally\nreshaped.\nx, y : vectors or keys in ``data``\nVariables that specify positions on the x and y axes.\nhue : vector or key in ``data``\nSemantic variable that is mapped to determine the color of plot elements.\nweights : vector or key in ``data``\nIf provided, weight the contribution of the corresponding data points\ntowards the cumulative distribution using these values.\nstat : {{\"proportion\", \"count\"}}\nDistribution statistic to compute.\ncomplementary : bool\nIf True, use the complementary CDF (1 - CDF)\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\nMethod for choosing the colors to use when mapping the ``hue`` semantic.\nString values are passed to :func:`color_palette`. List or dict values\nimply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\nSpecify the order of processing and plotting for categorical levels of the\n``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\nEither a pair of values that set the normalization range in data units\nor an object that will map from data units into a [0, 1] interval. Usage\nimplies numeric mapping.\nlog_scale : bool or number, or pair of bools or numbers\nSet axis scale(s) to log. A single value sets the data axis for univariate\ndistributions and both axes for bivariate distributions. A pair of values\nsets each axis independently. Numeric values are interpreted as the desired\nbase (default 10). If `False`, defer to the existing Axes scale.\nlegend : bool\nIf False, suppress the legend for semantic variables.\nax : :class:`matplotlib.axes.Axes`\nPre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\ninternally.\nkwargs\nOther keyword arguments are passed to :meth:`matplotlib.axes.Axes.plot`.\nReturns\n-------\n:class:`matplotlib.axes.Axes`\nThe matplotlib axes containing the plot.\nSee Also\n--------\ndisplot : Figure-level interface to distribution plot functions.\nhistplot : Plot a histogram of binned counts with optional normalization or smoothing.\nkdeplot : Plot univariate or bivariate distributions using kernel density estimation.\nrugplot : Plot a tick at each observation value along the x and/or y axes.\nExamples\n--------\n.. include:: ../docstrings/ecdfplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "weights": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "stat": {
          "type": "string",
          "default": "proportion",
          "description": "类型从默认值推断: str"
        },
        "complementary": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_norm": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "log_scale": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "legend": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.distributions.ecdfplot",
      "module": "seaborn.distributions",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.distributions.rugplot": {
    "name": "seaborn_distributions_rugplot",
    "description": "Plot marginal distributions by drawing ticks along the x and y axes.\nThis function is intended to complement other plots by showing the location\nof individual observations in an unobtrusive way.\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\nInput data structure. Either a long-form collection of vectors that can be\nassigned to named variables or a wide-form dataset that will be internally\nreshaped.\nx, y : vectors or keys in ``data``\nVariables that specify positions on the x and y axes.\nhue : vector or key in ``data``\nSemantic variable that is mapped to determine the color of plot elements.\nheight : float\nProportion of axes extent covered by each rug element. Can be negative.\nexpand_margins : bool\nIf True, increase the axes margins by the height of the rug to avoid\noverlap with other elements.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\nMethod for choosing the colors to use when mapping the ``hue`` semantic.\nString values are passed to :func:`color_palette`. List or dict values\nimply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\nSpecify the order of processing and plotting for categorical levels of the\n``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\nEither a pair of values that set the normalization range in data units\nor an object that will map from data units into a [0, 1] interval. Usage\nimplies numeric mapping.\nlegend : bool\nIf False, do not add a legend for semantic variables.\nax : :class:`matplotlib.axes.Axes`\nPre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\ninternally.\nkwargs\nOther keyword arguments are passed to\n:meth:`matplotlib.collections.LineCollection`\nReturns\n-------\n:class:`matplotlib.axes.Axes`\nThe matplotlib axes containing the plot.\nExamples\n--------\n.. include:: ../docstrings/rugplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "height": {
          "type": "number",
          "default": 0.025,
          "description": "类型从默认值推断: float"
        },
        "expand_margins": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_norm": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "legend": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.distributions.rugplot",
      "module": "seaborn.distributions",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.appdirs.user_cache_dir": {
    "name": "seaborn_external_appdirs_user_cache_dir",
    "description": "Return full path to the user-specific cache dir for this application.\n\"appname\" is the name of application.\nIf None, just the system directory is returned.\n\"appauthor\" (only used on Windows) is the name of the\nappauthor or distributing body for this application. Typically\nit is the owning company name. This falls back to appname. You may\npass False to disable it.\n\"version\" is an optional version path element to append to the\npath. You might want to use this if you want multiple versions\nof your app to be able to run independently. If used, this\nwould typically be \"<major>.<minor>\".\nOnly applied when appname is present.\n\"opinion\" (boolean) can be False to disable the appending of\n\"Cache\" to the base app data dir for Windows. See\ndiscussion below.\nTypical user cache directories are:\nMac OS X:   ~/Library/Caches/<AppName>\nUnix:       ~/.cache/<AppName> (XDG default)\nWin XP:     C:\\Documents and Settings\\<username>\\Local Settings\\Application Data\\<AppAuthor>\\<AppName>\\Cache\nVista:      C:\\Users\\<username>\\AppData\\Local\\<AppAuthor>\\<AppName>\\Cache\nOn Windows the only suggestion in the MSDN docs is that local settings go in\nthe `CSIDL_LOCAL_APPDATA` directory. This is identical to the non-roaming\napp data dir (the default returned by `user_data_dir` above). Apps typically\nput cache data somewhere *under* the given dir here. Some examples:\n...\\Mozilla\\Firefox\\Profiles\\<ProfileName>\\Cache\n...\\Acme\\SuperApp\\Cache\\1.0\nOPINION: This function appends \"Cache\" to the `CSIDL_LOCAL_APPDATA` value.\nThis can be disabled with the `opinion=False` option.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "appname": {
          "type": "string",
          "description": "类型从参数名推断: appname"
        },
        "appauthor": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "version": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "opinion": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.appdirs.user_cache_dir",
      "module": "seaborn.external.appdirs",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.dedent_lines": {
    "name": "seaborn_external_docscrape_dedent_lines",
    "description": "Deindent a list of lines maximally",
    "inputSchema": {
      "type": "object",
      "properties": {
        "lines": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "lines"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.dedent_lines",
      "module": "seaborn.external.docscrape",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.header": {
    "name": "seaborn_external_docscrape_header",
    "description": "执行header操作（seaborn.external.docscrape模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "类型从参数名推断: text"
        },
        "style": {
          "type": "string",
          "default": "-",
          "description": "类型从默认值推断: str"
        }
      },
      "required": [
        "text"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.header",
      "module": "seaborn.external.docscrape",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.indent": {
    "name": "seaborn_external_docscrape_indent",
    "description": "执行indent操作（seaborn.external.docscrape模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "str": {
          "type": "string",
          "description": "类型从参数名推断: str"
        },
        "indent": {
          "type": "integer",
          "default": 4,
          "description": "类型从默认值推断: int"
        }
      },
      "required": [
        "str"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.indent",
      "module": "seaborn.external.docscrape",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.strip_blank_lines": {
    "name": "seaborn_external_docscrape_strip_blank_lines",
    "description": "Remove leading and trailing blank lines from a list of lines",
    "inputSchema": {
      "type": "object",
      "properties": {
        "l": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "l"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.strip_blank_lines",
      "module": "seaborn.external.docscrape",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.ClassDoc.get": {
    "name": "seaborn_external_docscrape_ClassDoc_get",
    "description": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "default": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "key"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.ClassDoc.get",
      "module": "seaborn.external.docscrape",
      "class_name": "ClassDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.ClassDoc.items": {
    "name": "seaborn_external_docscrape_ClassDoc_items",
    "description": "D.items() -> a set-like object providing a view on D's items",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.ClassDoc.items",
      "module": "seaborn.external.docscrape",
      "class_name": "ClassDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.ClassDoc.keys": {
    "name": "seaborn_external_docscrape_ClassDoc_keys",
    "description": "D.keys() -> a set-like object providing a view on D's keys",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.ClassDoc.keys",
      "module": "seaborn.external.docscrape",
      "class_name": "ClassDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.ClassDoc.values": {
    "name": "seaborn_external_docscrape_ClassDoc_values",
    "description": "D.values() -> an object providing a view on D's values",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.ClassDoc.values",
      "module": "seaborn.external.docscrape",
      "class_name": "ClassDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.FunctionDoc.get": {
    "name": "seaborn_external_docscrape_FunctionDoc_get",
    "description": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "default": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "key"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.FunctionDoc.get",
      "module": "seaborn.external.docscrape",
      "class_name": "FunctionDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.FunctionDoc.get_func": {
    "name": "seaborn_external_docscrape_FunctionDoc_get_func",
    "description": "获取数据（FunctionDoc类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.FunctionDoc.get_func",
      "module": "seaborn.external.docscrape",
      "class_name": "FunctionDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.FunctionDoc.items": {
    "name": "seaborn_external_docscrape_FunctionDoc_items",
    "description": "D.items() -> a set-like object providing a view on D's items",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.FunctionDoc.items",
      "module": "seaborn.external.docscrape",
      "class_name": "FunctionDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.FunctionDoc.keys": {
    "name": "seaborn_external_docscrape_FunctionDoc_keys",
    "description": "D.keys() -> a set-like object providing a view on D's keys",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.FunctionDoc.keys",
      "module": "seaborn.external.docscrape",
      "class_name": "FunctionDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.FunctionDoc.values": {
    "name": "seaborn_external_docscrape_FunctionDoc_values",
    "description": "D.values() -> an object providing a view on D's values",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.FunctionDoc.values",
      "module": "seaborn.external.docscrape",
      "class_name": "FunctionDoc",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.NumpyDocString.get": {
    "name": "seaborn_external_docscrape_NumpyDocString_get",
    "description": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "default": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "key"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.NumpyDocString.get",
      "module": "seaborn.external.docscrape",
      "class_name": "NumpyDocString",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.NumpyDocString.items": {
    "name": "seaborn_external_docscrape_NumpyDocString_items",
    "description": "D.items() -> a set-like object providing a view on D's items",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.NumpyDocString.items",
      "module": "seaborn.external.docscrape",
      "class_name": "NumpyDocString",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.NumpyDocString.keys": {
    "name": "seaborn_external_docscrape_NumpyDocString_keys",
    "description": "D.keys() -> a set-like object providing a view on D's keys",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.NumpyDocString.keys",
      "module": "seaborn.external.docscrape",
      "class_name": "NumpyDocString",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.NumpyDocString.values": {
    "name": "seaborn_external_docscrape_NumpyDocString_values",
    "description": "D.values() -> an object providing a view on D's values",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.NumpyDocString.values",
      "module": "seaborn.external.docscrape",
      "class_name": "NumpyDocString",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.Reader.eof": {
    "name": "seaborn_external_docscrape_Reader_eof",
    "description": "执行eof操作（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.eof",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.Reader.is_empty": {
    "name": "seaborn_external_docscrape_Reader_is_empty",
    "description": "执行is_empty操作（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.is_empty",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    },
    "outputSchema": {
      "type": "boolean"
    }
  },
  "seaborn.external.docscrape.Reader.peek": {
    "name": "seaborn_external_docscrape_Reader_peek",
    "description": "执行peek操作（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "n": {
          "type": "integer",
          "default": 0,
          "description": "类型从默认值推断: int"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.peek",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.Reader.read": {
    "name": "seaborn_external_docscrape_Reader_read",
    "description": "读取数据（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.read",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.Reader.read_to_condition": {
    "name": "seaborn_external_docscrape_Reader_read_to_condition",
    "description": "读取数据（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "condition_func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "condition_func"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.read_to_condition",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.Reader.read_to_next_empty_line": {
    "name": "seaborn_external_docscrape_Reader_read_to_next_empty_line",
    "description": "读取数据（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.read_to_next_empty_line",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.Reader.read_to_next_unindented_line": {
    "name": "seaborn_external_docscrape_Reader_read_to_next_unindented_line",
    "description": "读取数据（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.read_to_next_unindented_line",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.Reader.reset": {
    "name": "seaborn_external_docscrape_Reader_reset",
    "description": "执行reset操作（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.reset",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.docscrape.Reader.seek_next_non_empty_line": {
    "name": "seaborn_external_docscrape_Reader_seek_next_non_empty_line",
    "description": "执行seek_next_non_empty_line操作（Reader类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.docscrape.Reader.seek_next_non_empty_line",
      "module": "seaborn.external.docscrape",
      "class_name": "Reader",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.dot_product": {
    "name": "seaborn_external_husl_dot_product",
    "description": "执行dot_product操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "a": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "b": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "a",
        "b"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.dot_product",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.f": {
    "name": "seaborn_external_husl_f",
    "description": "执行f操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "t": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "t"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.f",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.f_inv": {
    "name": "seaborn_external_husl_f_inv",
    "description": "执行f_inv操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "t": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "t"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.f_inv",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.from_linear": {
    "name": "seaborn_external_husl_from_linear",
    "description": "执行from_linear操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "c": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "c"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.from_linear",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.hex_to_husl": {
    "name": "seaborn_external_husl_hex_to_husl",
    "description": "执行hex_to_husl操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "hex": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "hex"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.hex_to_husl",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.hex_to_huslp": {
    "name": "seaborn_external_husl_hex_to_huslp",
    "description": "执行hex_to_huslp操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "hex": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "hex"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.hex_to_huslp",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.hex_to_rgb": {
    "name": "seaborn_external_husl_hex_to_rgb",
    "description": "执行hex_to_rgb操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "hex": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "hex"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.hex_to_rgb",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.husl_to_hex": {
    "name": "seaborn_external_husl_husl_to_hex",
    "description": "执行husl_to_hex操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "h": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "s": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "l": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "h",
        "s",
        "l"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.husl_to_hex",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.husl_to_lch": {
    "name": "seaborn_external_husl_husl_to_lch",
    "description": "执行husl_to_lch操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.husl_to_lch",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.husl_to_rgb": {
    "name": "seaborn_external_husl_husl_to_rgb",
    "description": "执行husl_to_rgb操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "h": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "s": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "l": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "h",
        "s",
        "l"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.husl_to_rgb",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.huslp_to_hex": {
    "name": "seaborn_external_husl_huslp_to_hex",
    "description": "执行huslp_to_hex操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "h": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "s": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "l": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "h",
        "s",
        "l"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.huslp_to_hex",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.huslp_to_lch": {
    "name": "seaborn_external_husl_huslp_to_lch",
    "description": "执行huslp_to_lch操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.huslp_to_lch",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.huslp_to_rgb": {
    "name": "seaborn_external_husl_huslp_to_rgb",
    "description": "执行huslp_to_rgb操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "h": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "s": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "l": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "h",
        "s",
        "l"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.huslp_to_rgb",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.lch_to_husl": {
    "name": "seaborn_external_husl_lch_to_husl",
    "description": "执行lch_to_husl操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.lch_to_husl",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.lch_to_huslp": {
    "name": "seaborn_external_husl_lch_to_huslp",
    "description": "执行lch_to_huslp操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.lch_to_huslp",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.lch_to_luv": {
    "name": "seaborn_external_husl_lch_to_luv",
    "description": "执行lch_to_luv操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.lch_to_luv",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.lch_to_rgb": {
    "name": "seaborn_external_husl_lch_to_rgb",
    "description": "执行lch_to_rgb操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "l": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "c": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "h": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "l",
        "c",
        "h"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.lch_to_rgb",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.luv_to_lch": {
    "name": "seaborn_external_husl_luv_to_lch",
    "description": "执行luv_to_lch操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.luv_to_lch",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.luv_to_xyz": {
    "name": "seaborn_external_husl_luv_to_xyz",
    "description": "执行luv_to_xyz操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.luv_to_xyz",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.max_chroma": {
    "name": "seaborn_external_husl_max_chroma",
    "description": "执行max_chroma操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "L": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "H": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "L",
        "H"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.max_chroma",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.max_chroma_pastel": {
    "name": "seaborn_external_husl_max_chroma_pastel",
    "description": "执行max_chroma_pastel操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "L": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "L"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.max_chroma_pastel",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.rgb_prepare": {
    "name": "seaborn_external_husl_rgb_prepare",
    "description": "执行rgb_prepare操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.rgb_prepare",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.rgb_to_hex": {
    "name": "seaborn_external_husl_rgb_to_hex",
    "description": "执行rgb_to_hex操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.rgb_to_hex",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.rgb_to_husl": {
    "name": "seaborn_external_husl_rgb_to_husl",
    "description": "执行rgb_to_husl操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "g": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "b": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "r",
        "g",
        "b"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.rgb_to_husl",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.rgb_to_huslp": {
    "name": "seaborn_external_husl_rgb_to_huslp",
    "description": "执行rgb_to_huslp操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "g": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "b": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "r",
        "g",
        "b"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.rgb_to_huslp",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.rgb_to_lch": {
    "name": "seaborn_external_husl_rgb_to_lch",
    "description": "执行rgb_to_lch操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "r": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "g": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "b": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "r",
        "g",
        "b"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.rgb_to_lch",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.rgb_to_xyz": {
    "name": "seaborn_external_husl_rgb_to_xyz",
    "description": "执行rgb_to_xyz操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.rgb_to_xyz",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.to_linear": {
    "name": "seaborn_external_husl_to_linear",
    "description": "执行to_linear操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "c": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "c"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.to_linear",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.xyz_to_luv": {
    "name": "seaborn_external_husl_xyz_to_luv",
    "description": "执行xyz_to_luv操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.xyz_to_luv",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.husl.xyz_to_rgb": {
    "name": "seaborn_external_husl_xyz_to_rgb",
    "description": "执行xyz_to_rgb操作（seaborn.external.husl模块的函数）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "triple": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "triple"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.husl.xyz_to_rgb",
      "module": "seaborn.external.husl",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.kde.gaussian_kde.covariance_factor": {
    "name": "seaborn_external_kde_gaussian_kde_covariance_factor",
    "description": "Computes the coefficient (`kde.factor`) that\nmultiplies the data covariance matrix to obtain the kernel covariance\nmatrix. The default is `scotts_factor`.  A subclass can overwrite this\nmethod to provide a different method, or set it through a call to\n`kde.set_bandwidth`.",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.kde.gaussian_kde.covariance_factor",
      "module": "seaborn.external.kde",
      "class_name": "gaussian_kde",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.kde.gaussian_kde.evaluate": {
    "name": "seaborn_external_kde_gaussian_kde_evaluate",
    "description": "Evaluate the estimated pdf on a set of points.\nParameters\n----------\npoints : (# of dimensions, # of points)-array\nAlternatively, a (# of dimensions,) vector can be passed in and\ntreated as a single point.\nReturns\n-------\nvalues : (# of points,)-array\nThe values at each point.\nRaises\n------\nValueError : if the dimensionality of the input points is different than\nthe dimensionality of the KDE.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "points": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "points"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.kde.gaussian_kde.evaluate",
      "module": "seaborn.external.kde",
      "class_name": "gaussian_kde",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.kde.gaussian_kde.pdf": {
    "name": "seaborn_external_kde_gaussian_kde_pdf",
    "description": "Evaluate the estimated pdf on a provided set of points.\nNotes\n-----\nThis is an alias for `gaussian_kde.evaluate`.  See the ``evaluate``\ndocstring for more details.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "x"
      ]
    },
    "metadata": {
      "source_function": "seaborn.external.kde.gaussian_kde.pdf",
      "module": "seaborn.external.kde",
      "class_name": "gaussian_kde",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.kde.gaussian_kde.scotts_factor": {
    "name": "seaborn_external_kde_gaussian_kde_scotts_factor",
    "description": "Computes the coefficient (`kde.factor`) that\nmultiplies the data covariance matrix to obtain the kernel covariance\nmatrix. The default is `scotts_factor`.  A subclass can overwrite this\nmethod to provide a different method, or set it through a call to\n`kde.set_bandwidth`.",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.kde.gaussian_kde.scotts_factor",
      "module": "seaborn.external.kde",
      "class_name": "gaussian_kde",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.kde.gaussian_kde.set_bandwidth": {
    "name": "seaborn_external_kde_gaussian_kde_set_bandwidth",
    "description": "Compute the estimator bandwidth with given method.\nThe new bandwidth calculated after a call to `set_bandwidth` is used\nfor subsequent evaluations of the estimated density.\nParameters\n----------\nbw_method : str, scalar or callable, optional\nThe method used to calculate the estimator bandwidth.  This can be\n'scott', 'silverman', a scalar constant or a callable.  If a\nscalar, this will be used directly as `kde.factor`.  If a callable,\nit should take a `gaussian_kde` instance as only parameter and\nreturn a scalar.  If None (default), nothing happens; the current\n`kde.covariance_factor` method is kept.\nNotes\n-----\n.. versionadded:: 0.11",
    "inputSchema": {
      "type": "object",
      "properties": {
        "bw_method": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.kde.gaussian_kde.set_bandwidth",
      "module": "seaborn.external.kde",
      "class_name": "gaussian_kde",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.external.kde.gaussian_kde.silverman_factor": {
    "name": "seaborn_external_kde_gaussian_kde_silverman_factor",
    "description": "Compute the Silverman factor.\nReturns\n-------\ns : float\nThe silverman factor.",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.external.kde.gaussian_kde.silverman_factor",
      "module": "seaborn.external.kde",
      "class_name": "gaussian_kde",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.clustermap": {
    "name": "seaborn_matrix_clustermap",
    "description": "Plot a matrix dataset as a hierarchically-clustered heatmap.\nThis function requires scipy to be available.\nParameters\n----------\ndata : 2D array-like\nRectangular data for clustering. Cannot contain NAs.\npivot_kws : dict, optional\nIf `data` is a tidy dataframe, can provide keyword arguments for\npivot to create a rectangular dataframe.\nmethod : str, optional\nLinkage method to use for calculating clusters. See\n:func:`scipy.cluster.hierarchy.linkage` documentation for more\ninformation.\nmetric : str, optional\nDistance metric to use for the data. See\n:func:`scipy.spatial.distance.pdist` documentation for more options.\nTo use different metrics (or methods) for rows and columns, you may\nconstruct each linkage matrix yourself and provide them as\n`{row,col}_linkage`.\nz_score : int or None, optional\nEither 0 (rows) or 1 (columns). Whether or not to calculate z-scores\nfor the rows or the columns. Z scores are: z = (x - mean)/std, so\nvalues in each row (column) will get the mean of the row (column)\nsubtracted, then divided by the standard deviation of the row (column).\nThis ensures that each row (column) has mean of 0 and variance of 1.\nstandard_scale : int or None, optional\nEither 0 (rows) or 1 (columns). Whether or not to standardize that\ndimension, meaning for each row or column, subtract the minimum and\ndivide each by its maximum.\nfigsize : tuple of (width, height), optional\nOverall size of the figure.\ncbar_kws : dict, optional\nKeyword arguments to pass to `cbar_kws` in :func:`heatmap`, e.g. to\nadd a label to the colorbar.\n{row,col}_cluster : bool, optional\nIf ``True``, cluster the {rows, columns}.\n{row,col}_linkage : :class:`numpy.ndarray`, optional\nPrecomputed linkage matrix for the rows or columns. See\n:func:`scipy.cluster.hierarchy.linkage` for specific formats.\n{row,col}_colors : list-like or pandas DataFrame/Series, optional\nList of colors to label for either the rows or columns. Useful to evaluate\nwhether samples within a group are clustered together. Can use nested lists or\nDataFrame for multiple color levels of labeling. If given as a\n:class:`pandas.DataFrame` or :class:`pandas.Series`, labels for the colors are\nextracted from the DataFrames column names or from the name of the Series.\nDataFrame/Series colors are also matched to the data by their index, ensuring\ncolors are drawn in the correct order.\nmask : bool array or DataFrame, optional\nIf passed, data will not be shown in cells where `mask` is True.\nCells with missing values are automatically masked. Only used for\nvisualizing, not for calculating.\n{dendrogram,colors}_ratio : float, or pair of floats, optional\nProportion of the figure size devoted to the two marginal elements. If\na pair is given, they correspond to (row, col) ratios.\ncbar_pos : tuple of (left, bottom, width, height), optional\nPosition of the colorbar axes in the figure. Setting to ``None`` will\ndisable the colorbar.\ntree_kws : dict, optional\nParameters for the :class:`matplotlib.collections.LineCollection`\nthat is used to plot the lines of the dendrogram tree.\nkwargs : other keyword arguments\nAll other keyword arguments are passed to :func:`heatmap`.\nReturns\n-------\n:class:`ClusterGrid`\nA :class:`ClusterGrid` instance.\nSee Also\n--------\nheatmap : Plot rectangular data as a color-encoded matrix.\nNotes\n-----\nThe returned object has a ``savefig`` method that should be used if you\nwant to save the figure object without clipping the dendrograms.\nTo access the reordered row indices, use:\n``clustergrid.dendrogram_row.reordered_ind``\nColumn indices, use:\n``clustergrid.dendrogram_col.reordered_ind``\nExamples\n--------\n.. include:: ../docstrings/clustermap.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "pivot_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "method": {
          "type": "string",
          "default": "average",
          "description": "类型从默认值推断: str"
        },
        "metric": {
          "type": "string",
          "default": "euclidean",
          "description": "类型从默认值推断: str"
        },
        "z_score": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "standard_scale": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "figsize": {
          "type": "string",
          "default": "(10, 10)",
          "description": "类型从默认值推断: tuple"
        },
        "cbar_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "row_cluster": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "col_cluster": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "row_linkage": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "col_linkage": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "row_colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "col_colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "mask": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "dendrogram_ratio": {
          "type": "number",
          "default": 0.2,
          "description": "类型从默认值推断: float"
        },
        "colors_ratio": {
          "type": "number",
          "default": 0.03,
          "description": "类型从默认值推断: float"
        },
        "cbar_pos": {
          "type": "string",
          "default": "(0.02, 0.8, 0.05, 0.18)",
          "description": "类型从默认值推断: tuple"
        },
        "tree_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "data",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.clustermap",
      "module": "seaborn.matrix",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.dendrogram": {
    "name": "seaborn_matrix_dendrogram",
    "description": "Draw a tree diagram of relationships within a matrix\nParameters\n----------\ndata : pandas.DataFrame\nRectangular data\nlinkage : numpy.array, optional\nLinkage matrix\naxis : int, optional\nWhich axis to use to calculate linkage. 0 is rows, 1 is columns.\nlabel : bool, optional\nIf True, label the dendrogram at leaves with column or row names\nmetric : str, optional\nDistance metric. Anything valid for scipy.spatial.distance.pdist\nmethod : str, optional\nLinkage method to use. Anything valid for\nscipy.cluster.hierarchy.linkage\nrotate : bool, optional\nWhen plotting the matrix, whether to rotate it 90 degrees\ncounter-clockwise, so the leaves face right\ntree_kws : dict, optional\nKeyword arguments for the ``matplotlib.collections.LineCollection``\nthat is used for plotting the lines of the dendrogram tree.\nax : matplotlib axis, optional\nAxis to plot on, otherwise uses current axis\nReturns\n-------\ndendrogramplotter : _DendrogramPlotter\nA Dendrogram plotter object.\nNotes\n-----\nAccess the reordered dendrogram indices with\ndendrogramplotter.reordered_ind",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "linkage": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "axis": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        },
        "label": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "metric": {
          "type": "string",
          "default": "euclidean",
          "description": "类型从默认值推断: str"
        },
        "method": {
          "type": "string",
          "default": "average",
          "description": "类型从默认值推断: str"
        },
        "rotate": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "tree_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "data"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.dendrogram",
      "module": "seaborn.matrix",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.heatmap": {
    "name": "seaborn_matrix_heatmap",
    "description": "Plot rectangular data as a color-encoded matrix.\nThis is an Axes-level function and will draw the heatmap into the\ncurrently-active Axes if none is provided to the ``ax`` argument.  Part of\nthis Axes space will be taken and used to plot a colormap, unless ``cbar``\nis False or a separate Axes is provided to ``cbar_ax``.\nParameters\n----------\ndata : rectangular dataset\n2D dataset that can be coerced into an ndarray. If a Pandas DataFrame\nis provided, the index/column information will be used to label the\ncolumns and rows.\nvmin, vmax : floats, optional\nValues to anchor the colormap, otherwise they are inferred from the\ndata and other keyword arguments.\ncmap : matplotlib colormap name or object, or list of colors, optional\nThe mapping from data values to color space. If not provided, the\ndefault will depend on whether ``center`` is set.\ncenter : float, optional\nThe value at which to center the colormap when plotting divergent data.\nUsing this parameter will change the default ``cmap`` if none is\nspecified.\nrobust : bool, optional\nIf True and ``vmin`` or ``vmax`` are absent, the colormap range is\ncomputed with robust quantiles instead of the extreme values.\nannot : bool or rectangular dataset, optional\nIf True, write the data value in each cell. If an array-like with the\nsame shape as ``data``, then use this to annotate the heatmap instead\nof the data. Note that DataFrames will match on position, not index.\nfmt : str, optional\nString formatting code to use when adding annotations.\nannot_kws : dict of key, value mappings, optional\nKeyword arguments for :meth:`matplotlib.axes.Axes.text` when ``annot``\nis True.\nlinewidths : float, optional\nWidth of the lines that will divide each cell.\nlinecolor : color, optional\nColor of the lines that will divide each cell.\ncbar : bool, optional\nWhether to draw a colorbar.\ncbar_kws : dict of key, value mappings, optional\nKeyword arguments for :meth:`matplotlib.figure.Figure.colorbar`.\ncbar_ax : matplotlib Axes, optional\nAxes in which to draw the colorbar, otherwise take space from the\nmain Axes.\nsquare : bool, optional\nIf True, set the Axes aspect to \"equal\" so each cell will be\nsquare-shaped.\nxticklabels, yticklabels : \"auto\", bool, list-like, or int, optional\nIf True, plot the column names of the dataframe. If False, don't plot\nthe column names. If list-like, plot these alternate labels as the\nxticklabels. If an integer, use the column names but plot only every\nn label. If \"auto\", try to densely plot non-overlapping labels.\nmask : bool array or DataFrame, optional\nIf passed, data will not be shown in cells where ``mask`` is True.\nCells with missing values are automatically masked.\nax : matplotlib Axes, optional\nAxes in which to draw the plot, otherwise use the currently-active\nAxes.\nkwargs : other keyword arguments\nAll other keyword arguments are passed to\n:meth:`matplotlib.axes.Axes.pcolormesh`.\nReturns\n-------\nax : matplotlib Axes\nAxes object with the heatmap.\nSee Also\n--------\nclustermap : Plot a matrix using hierarchical clustering to arrange the\nrows and columns.\nExamples\n--------\n.. include:: ../docstrings/heatmap.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "vmin": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "vmax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "cmap": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "center": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "robust": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "annot": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "fmt": {
          "type": "string",
          "default": ".2g",
          "description": "类型从默认值推断: str"
        },
        "annot_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "linewidths": {
          "type": "integer",
          "default": 0,
          "description": "类型从默认值推断: int"
        },
        "linecolor": {
          "type": "string",
          "default": "white",
          "description": "类型从默认值推断: str"
        },
        "cbar": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "cbar_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "cbar_ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "square": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "xticklabels": {
          "type": "string",
          "default": "auto",
          "description": "类型从默认值推断: str"
        },
        "yticklabels": {
          "type": "string",
          "default": "auto",
          "description": "类型从默认值推断: str"
        },
        "mask": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "data",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.heatmap",
      "module": "seaborn.matrix",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.add_legend": {
    "name": "seaborn_matrix_ClusterGrid_add_legend",
    "description": "Draw a legend, maybe placing it outside axes and resizing the figure.\nParameters\n----------\nlegend_data : dict\nDictionary mapping label names (or two-element tuples where the\nsecond element is a label name) to matplotlib artist handles. The\ndefault reads from ``self._legend_data``.\ntitle : string\nTitle for the legend. The default reads from ``self._hue_var``.\nlabel_order : list of labels\nThe order that the legend entries should appear in. The default\nreads from ``self.hue_names``.\nadjust_subtitles : bool\nIf True, modify entries with invisible artists to left-align\nthe labels and set the font size to that of a title.\nkwargs : key, value pairings\nOther keyword arguments are passed to the underlying legend methods\non the Figure or Axes object.\nReturns\n-------\nself : Grid instance\nReturns self for easy chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "legend_data": {
          "type": "object",
          "description": "类型从参数名推断: legend_data"
        },
        "title": {
          "type": "string",
          "description": "类型从参数名推断: title"
        },
        "label_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "adjust_subtitles": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.add_legend",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.apply": {
    "name": "seaborn_matrix_ClusterGrid_apply",
    "description": "Pass the grid to a user-supplied function and return self.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` is ignored; this method returns self.\nSee the `pipe` method if you want the return value.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.apply",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.color_list_to_matrix_and_cmap": {
    "name": "seaborn_matrix_ClusterGrid_color_list_to_matrix_and_cmap",
    "description": "Turns a list of colors into a numpy matrix and matplotlib colormap\nThese arguments can now be plotted using heatmap(matrix, cmap)\nand the provided colors will be plotted.\nParameters\n----------\ncolors : list of matplotlib colors\nColors to label the rows or columns of a dataframe.\nind : list of ints\nOrdering of the rows or columns, to reorder the original colors\nby the clustered dendrogram order\naxis : int\nWhich axis this is labeling\nReturns\n-------\nmatrix : numpy.array\nA numpy array of integer values, where each indexes into the cmap\ncmap : matplotlib.colors.ListedColormap",
    "inputSchema": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "ind": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "axis": {
          "type": "integer",
          "default": 0,
          "description": "类型从默认值推断: int"
        }
      },
      "required": [
        "colors",
        "ind"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.color_list_to_matrix_and_cmap",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": true,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.dim_ratios": {
    "name": "seaborn_matrix_ClusterGrid_dim_ratios",
    "description": "Get the proportions of the figure taken up by each axes.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "dendrogram_ratio": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "colors_ratio": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "colors",
        "dendrogram_ratio",
        "colors_ratio"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.dim_ratios",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.format_data": {
    "name": "seaborn_matrix_ClusterGrid_format_data",
    "description": "Extract variables from data or use directly.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "pivot_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "z_score": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "standard_scale": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "data",
        "pivot_kws"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.format_data",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.pipe": {
    "name": "seaborn_matrix_ClusterGrid_pipe",
    "description": "Pass the grid to a user-supplied function and return its value.\nThe `func` must accept an object of this type for its first\npositional argument. Additional arguments are passed through.\nThe return value of `func` becomes the return value of this method.\nSee the `apply` method if you want to return self instead.\nAdded in v0.12.0.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "func": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "func",
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.pipe",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.plot": {
    "name": "seaborn_matrix_ClusterGrid_plot",
    "description": "执行plot操作（ClusterGrid类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "method": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "colorbar_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "row_cluster": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "col_cluster": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "row_linkage": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "col_linkage": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "tree_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "metric",
        "method",
        "colorbar_kws",
        "row_cluster",
        "col_cluster",
        "row_linkage",
        "col_linkage",
        "tree_kws",
        "kws"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.plot",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.plot_colors": {
    "name": "seaborn_matrix_ClusterGrid_plot_colors",
    "description": "Plots color labels between the dendrogram and the heatmap\nParameters\n----------\nheatmap_kws : dict\nKeyword arguments heatmap",
    "inputSchema": {
      "type": "object",
      "properties": {
        "xind": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "yind": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "xind",
        "yind",
        "kws"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.plot_colors",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.plot_dendrograms": {
    "name": "seaborn_matrix_ClusterGrid_plot_dendrograms",
    "description": "执行plot_dendrograms操作（ClusterGrid类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "row_cluster": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "col_cluster": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "metric": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "method": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "row_linkage": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "col_linkage": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "tree_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "row_cluster",
        "col_cluster",
        "metric",
        "method",
        "row_linkage",
        "col_linkage",
        "tree_kws"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.plot_dendrograms",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.plot_matrix": {
    "name": "seaborn_matrix_ClusterGrid_plot_matrix",
    "description": "执行plot_matrix操作（ClusterGrid类的方法）",
    "inputSchema": {
      "type": "object",
      "properties": {
        "colorbar_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "xind": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "yind": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "colorbar_kws",
        "xind",
        "yind",
        "kws"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.plot_matrix",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.savefig": {
    "name": "seaborn_matrix_ClusterGrid_savefig",
    "description": "Save an image of the plot.\nThis wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\nby default. Parameters are passed through to the matplotlib function.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.savefig",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.set": {
    "name": "seaborn_matrix_ClusterGrid_set",
    "description": "Set attributes on each subplot Axes.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.set",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.standard_scale": {
    "name": "seaborn_matrix_ClusterGrid_standard_scale",
    "description": "Divide the data by the difference between the max and min\nParameters\n----------\ndata2d : pandas.DataFrame\nData to normalize\naxis : int\nWhich axis to normalize across. If 0, normalize across rows, if 1,\nnormalize across columns.\nReturns\n-------\nstandardized : pandas.DataFrame\nNoramlized data with a mean of 0 and variance of 1 across the\nspecified axis.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data2d": {
          "type": "object",
          "description": "类型从参数名推断: data2d"
        },
        "axis": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        }
      },
      "required": [
        "data2d"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.standard_scale",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": true,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.tick_params": {
    "name": "seaborn_matrix_ClusterGrid_tick_params",
    "description": "Modify the ticks, tick labels, and gridlines.\nParameters\n----------\naxis : {'x', 'y', 'both'}\nThe axis on which to apply the formatting.\nkwargs : keyword arguments\nAdditional keyword arguments to pass to\n:meth:`matplotlib.axes.Axes.tick_params`.\nReturns\n-------\nself : Grid instance\nReturns self for easy chaining.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "string",
          "default": "both",
          "description": "类型从默认值推断: str"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.tick_params",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.tight_layout": {
    "name": "seaborn_matrix_ClusterGrid_tight_layout",
    "description": "Call fig.tight_layout within rect that exclude the legend.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.tight_layout",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.matrix.ClusterGrid.z_score": {
    "name": "seaborn_matrix_ClusterGrid_z_score",
    "description": "Standarize the mean and variance of the data axis\nParameters\n----------\ndata2d : pandas.DataFrame\nData to normalize\naxis : int\nWhich axis to normalize across. If 0, normalize across rows, if 1,\nnormalize across columns.\nReturns\n-------\nnormalized : pandas.DataFrame\nNoramlized data with a mean of 0 and variance of 1 across the\nspecified axis.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data2d": {
          "type": "object",
          "description": "类型从参数名推断: data2d"
        },
        "axis": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        }
      },
      "required": [
        "data2d"
      ]
    },
    "metadata": {
      "source_function": "seaborn.matrix.ClusterGrid.z_score",
      "module": "seaborn.matrix",
      "class_name": "ClusterGrid",
      "is_async": false,
      "is_static": true,
      "is_classmethod": false
    }
  },
  "seaborn.miscplot.dogplot": {
    "name": "seaborn_miscplot_dogplot",
    "description": "Who's a good boy?",
    "inputSchema": {
      "type": "object",
      "properties": {
        "_": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "__": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "_",
        "__"
      ]
    },
    "metadata": {
      "source_function": "seaborn.miscplot.dogplot",
      "module": "seaborn.miscplot",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.miscplot.palplot": {
    "name": "seaborn_miscplot_palplot",
    "description": "Plot the values in a color palette as a horizontal array.\nParameters\n----------\npal : sequence of matplotlib colors\ncolors, i.e. as returned by seaborn.color_palette()\nsize :\nscaling factor for size of plot",
    "inputSchema": {
      "type": "object",
      "properties": {
        "pal": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "size": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        }
      },
      "required": [
        "pal"
      ]
    },
    "metadata": {
      "source_function": "seaborn.miscplot.palplot",
      "module": "seaborn.miscplot",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.blend_palette": {
    "name": "seaborn_palettes_blend_palette",
    "description": "Make a palette that blends between a list of colors.\nParameters\n----------\ncolors : sequence of colors in various formats interpreted by `input`\nhex code, html color name, or tuple in `input` space.\nn_colors : int, optional\nNumber of colors in the palette.\nas_cmap : bool, optional\nIf True, return a :class:`matplotlib.colors.ListedColormap`.\nReturns\n-------\npalette\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nExamples\n--------\n.. include: ../docstrings/blend_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "n_colors": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "input": {
          "type": "string",
          "default": "rgb",
          "description": "类型从默认值推断: str"
        }
      },
      "required": [
        "colors"
      ]
    },
    "metadata": {
      "source_function": "seaborn.palettes.blend_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.color_palette": {
    "name": "seaborn_palettes_color_palette",
    "description": "Return a list of colors or continuous colormap defining a palette.\nPossible ``palette`` values include:\n- Name of a seaborn palette (deep, muted, bright, pastel, dark, colorblind)\n- Name of matplotlib colormap\n- 'husl' or 'hls'\n- 'ch:<cubehelix arguments>'\n- 'light:<color>', 'dark:<color>', 'blend:<color>,<color>',\n- A sequence of colors in any format matplotlib accepts\nCalling this function with ``palette=None`` will return the current\nmatplotlib color cycle.\nThis function can also be used in a ``with`` statement to temporarily\nset the color cycle for a plot or set of plots.\nSee the :ref:`tutorial <palette_tutorial>` for more information.\nParameters\n----------\npalette : None, string, or sequence, optional\nName of palette or None to return current palette. If a sequence, input\ncolors are used but possibly cycled and desaturated.\nn_colors : int, optional\nNumber of colors in the palette. If ``None``, the default will depend\non how ``palette`` is specified. Named palettes default to 6 colors,\nbut grabbing the current palette or passing in a list of colors will\nnot change the number of colors unless this is specified. Asking for\nmore colors than exist in the palette will cause it to cycle. Ignored\nwhen ``as_cmap`` is True.\ndesat : float, optional\nProportion to desaturate each color by.\nas_cmap : bool\nIf True, return a :class:`matplotlib.colors.ListedColormap`.\nReturns\n-------\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nSee Also\n--------\nset_palette : Set the default color cycle for all plots.\nset_color_codes : Reassign color codes like ``\"b\"``, ``\"g\"``, etc. to\ncolors from one of the seaborn palettes.\nExamples\n--------\n.. include:: ../docstrings/color_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "n_colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "desat": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.palettes.color_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.crayon_palette": {
    "name": "seaborn_palettes_crayon_palette",
    "description": "Make a palette with color names from Crayola crayons.\nColors are taken from here:\nhttps://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors\nThis is just a simple wrapper around the `seaborn.crayons` dictionary.\nParameters\n----------\ncolors : list of strings\nList of keys in the `seaborn.crayons` dictionary.\nReturns\n-------\npalette\nA list of colors as RGB tuples.\nSee Also\n--------\nxkcd_palette : Make a palette with named colors from the XKCD color survey.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "colors"
      ]
    },
    "metadata": {
      "source_function": "seaborn.palettes.crayon_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.cubehelix_palette": {
    "name": "seaborn_palettes_cubehelix_palette",
    "description": "Make a sequential palette from the cubehelix system.\nThis produces a colormap with linearly-decreasing (or increasing)\nbrightness. That means that information will be preserved if printed to\nblack and white or viewed by someone who is colorblind.  \"cubehelix\" is\nalso available as a matplotlib-based palette, but this function gives the\nuser more control over the look of the palette and has a different set of\ndefaults.\nIn addition to using this function, it is also possible to generate a\ncubehelix palette generally in seaborn using a string starting with\n`ch:` and containing other parameters (e.g. `\"ch:s=.25,r=-.5\"`).\nParameters\n----------\nn_colors : int\nNumber of colors in the palette.\nstart : float, 0 <= start <= 3\nThe hue value at the start of the helix.\nrot : float\nRotations around the hue wheel over the range of the palette.\ngamma : float 0 <= gamma\nNonlinearity to emphasize dark (gamma < 1) or light (gamma > 1) colors.\nhue : float, 0 <= hue <= 1\nSaturation of the colors.\ndark : float 0 <= dark <= 1\nIntensity of the darkest color in the palette.\nlight : float 0 <= light <= 1\nIntensity of the lightest color in the palette.\nreverse : bool\nIf True, the palette will go from dark to light.\nas_cmap : bool\nIf True, return a :class:`matplotlib.colors.ListedColormap`.\nReturns\n-------\npalette\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nSee Also\n--------\nchoose_cubehelix_palette : Launch an interactive widget to select cubehelix\npalette parameters.\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\nReferences\n----------\nGreen, D. A. (2011). \"A colour scheme for the display of astronomical\nintensity images\". Bulletin of the Astromical Society of India, Vol. 39,\np. 289-295.\nExamples\n--------\n.. include:: ../docstrings/cubehelix_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "start": {
          "type": "integer",
          "default": 0,
          "description": "类型从默认值推断: int"
        },
        "rot": {
          "type": "number",
          "default": 0.4,
          "description": "类型从默认值推断: float"
        },
        "gamma": {
          "type": "number",
          "default": 1.0,
          "description": "类型从默认值推断: float"
        },
        "hue": {
          "type": "number",
          "default": 0.8,
          "description": "类型从默认值推断: float"
        },
        "light": {
          "type": "number",
          "default": 0.85,
          "description": "类型从默认值推断: float"
        },
        "dark": {
          "type": "number",
          "default": 0.15,
          "description": "类型从默认值推断: float"
        },
        "reverse": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.palettes.cubehelix_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.dark_palette": {
    "name": "seaborn_palettes_dark_palette",
    "description": "Make a sequential palette that blends from dark to ``color``.\nThis kind of palette is good for data that range between relatively\nuninteresting low values and interesting high values.\nThe ``color`` parameter can be specified in a number of ways, including\nall options for defining a color in matplotlib and several additional\ncolor spaces that are handled by seaborn. You can also use the database\nof named colors from the XKCD color survey.\nIf you are using the IPython notebook, you can also choose this palette\ninteractively with the :func:`choose_dark_palette` function.\nParameters\n----------\ncolor : base color for high values\nhex, rgb-tuple, or html color name\nn_colors : int, optional\nnumber of colors in the palette\nreverse : bool, optional\nif True, reverse the direction of the blend\nas_cmap : bool, optional\nIf True, return a :class:`matplotlib.colors.ListedColormap`.\ninput : {'rgb', 'hls', 'husl', xkcd'}\nColor space to interpret the input color. The first three options\napply to tuple inputs and the latter applies to string inputs.\nReturns\n-------\npalette\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nSee Also\n--------\nlight_palette : Create a sequential palette with bright low values.\ndiverging_palette : Create a diverging palette with two colors.\nExamples\n--------\n.. include:: ../docstrings/dark_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "n_colors": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "reverse": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "input": {
          "type": "string",
          "default": "rgb",
          "description": "类型从默认值推断: str"
        }
      },
      "required": [
        "color"
      ]
    },
    "metadata": {
      "source_function": "seaborn.palettes.dark_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.diverging_palette": {
    "name": "seaborn_palettes_diverging_palette",
    "description": "Make a diverging palette between two HUSL colors.\nIf you are using the IPython notebook, you can also choose this palette\ninteractively with the :func:`choose_diverging_palette` function.\nParameters\n----------\nh_neg, h_pos : float in [0, 359]\nAnchor hues for negative and positive extents of the map.\ns : float in [0, 100], optional\nAnchor saturation for both extents of the map.\nl : float in [0, 100], optional\nAnchor lightness for both extents of the map.\nsep : int, optional\nSize of the intermediate region.\nn : int, optional\nNumber of colors in the palette (if not returning a cmap)\ncenter : {\"light\", \"dark\"}, optional\nWhether the center of the palette is light or dark\nas_cmap : bool, optional\nIf True, return a :class:`matplotlib.colors.ListedColormap`.\nReturns\n-------\npalette\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nSee Also\n--------\ndark_palette : Create a sequential palette with dark values.\nlight_palette : Create a sequential palette with light values.\nExamples\n--------\n.. include: ../docstrings/diverging_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "h_neg": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "h_pos": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "s": {
          "type": "integer",
          "default": 75,
          "description": "类型从默认值推断: int"
        },
        "l": {
          "type": "integer",
          "default": 50,
          "description": "类型从默认值推断: int"
        },
        "sep": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        },
        "n": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "center": {
          "type": "string",
          "default": "light",
          "description": "类型从默认值推断: str"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": [
        "h_neg",
        "h_pos"
      ]
    },
    "metadata": {
      "source_function": "seaborn.palettes.diverging_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.hls_palette": {
    "name": "seaborn_palettes_hls_palette",
    "description": "Return hues with constant lightness and saturation in the HLS system.\nThe hues are evenly sampled along a circular path. The resulting palette will be\nappropriate for categorical or cyclical data.\nThe `h`, `l`, and `s` values should be between 0 and 1.\n.. note::\nWhile the separation of the resulting colors will be mathematically\nconstant, the HLS system does not construct a perceptually-uniform space,\nso their apparent intensity will vary.\nParameters\n----------\nn_colors : int\nNumber of colors in the palette.\nh : float\nThe value of the first hue.\nl : float\nThe lightness value.\ns : float\nThe saturation intensity.\nas_cmap : bool\nIf True, return a matplotlib colormap object.\nReturns\n-------\npalette\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nSee Also\n--------\nhusl_palette : Make a palette using evenly spaced hues in the HUSL system.\nExamples\n--------\n.. include:: ../docstrings/hls_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "h": {
          "type": "number",
          "default": 0.01,
          "description": "类型从默认值推断: float"
        },
        "l": {
          "type": "number",
          "default": 0.6,
          "description": "类型从默认值推断: float"
        },
        "s": {
          "type": "number",
          "default": 0.65,
          "description": "类型从默认值推断: float"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.palettes.hls_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.husl_palette": {
    "name": "seaborn_palettes_husl_palette",
    "description": "Return hues with constant lightness and saturation in the HUSL system.\nThe hues are evenly sampled along a circular path. The resulting palette will be\nappropriate for categorical or cyclical data.\nThe `h`, `l`, and `s` values should be between 0 and 1.\nThis function is similar to :func:`hls_palette`, but it uses a nonlinear color\nspace that is more perceptually uniform.\nParameters\n----------\nn_colors : int\nNumber of colors in the palette.\nh : float\nThe value of the first hue.\nl : float\nThe lightness value.\ns : float\nThe saturation intensity.\nas_cmap : bool\nIf True, return a matplotlib colormap object.\nReturns\n-------\npalette\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nSee Also\n--------\nhls_palette : Make a palette using evenly spaced hues in the HSL system.\nExamples\n--------\n.. include:: ../docstrings/husl_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "n_colors": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "h": {
          "type": "number",
          "default": 0.01,
          "description": "类型从默认值推断: float"
        },
        "s": {
          "type": "number",
          "default": 0.9,
          "description": "类型从默认值推断: float"
        },
        "l": {
          "type": "number",
          "default": 0.65,
          "description": "类型从默认值推断: float"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.palettes.husl_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.light_palette": {
    "name": "seaborn_palettes_light_palette",
    "description": "Make a sequential palette that blends from light to ``color``.\nThe ``color`` parameter can be specified in a number of ways, including\nall options for defining a color in matplotlib and several additional\ncolor spaces that are handled by seaborn. You can also use the database\nof named colors from the XKCD color survey.\nIf you are using a Jupyter notebook, you can also choose this palette\ninteractively with the :func:`choose_light_palette` function.\nParameters\n----------\ncolor : base color for high values\nhex code, html color name, or tuple in `input` space.\nn_colors : int, optional\nnumber of colors in the palette\nreverse : bool, optional\nif True, reverse the direction of the blend\nas_cmap : bool, optional\nIf True, return a :class:`matplotlib.colors.ListedColormap`.\ninput : {'rgb', 'hls', 'husl', xkcd'}\nColor space to interpret the input color. The first three options\napply to tuple inputs and the latter applies to string inputs.\nReturns\n-------\npalette\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\ndiverging_palette : Create a diverging palette with two colors.\nExamples\n--------\n.. include:: ../docstrings/light_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "n_colors": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "reverse": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "input": {
          "type": "string",
          "default": "rgb",
          "description": "类型从默认值推断: str"
        }
      },
      "required": [
        "color"
      ]
    },
    "metadata": {
      "source_function": "seaborn.palettes.light_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.mpl_palette": {
    "name": "seaborn_palettes_mpl_palette",
    "description": "Return a palette or colormap from the matplotlib registry.\nFor continuous palettes, evenly-spaced discrete samples are chosen while\nexcluding the minimum and maximum value in the colormap to provide better\ncontrast at the extremes.\nFor qualitative palettes (e.g. those from colorbrewer), exact values are\nindexed (rather than interpolated), but fewer than `n_colors` can be returned\nif the palette does not define that many.\nParameters\n----------\nname : string\nName of the palette. This should be a named matplotlib colormap.\nn_colors : int\nNumber of discrete colors in the palette.\nReturns\n-------\nlist of RGB tuples or :class:`matplotlib.colors.ListedColormap`\nExamples\n--------\n.. include: ../docstrings/mpl_palette.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "类型从参数名推断: name"
        },
        "n_colors": {
          "type": "integer",
          "default": 6,
          "description": "类型从默认值推断: int"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": [
        "name"
      ]
    },
    "metadata": {
      "source_function": "seaborn.palettes.mpl_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.set_color_codes": {
    "name": "seaborn_palettes_set_color_codes",
    "description": "Change how matplotlib color shorthands are interpreted.\nCalling this will change how shorthand codes like \"b\" or \"g\"\nare interpreted by matplotlib in subsequent plots.\nParameters\n----------\npalette : {deep, muted, pastel, dark, bright, colorblind}\nNamed seaborn palette to use as the source of colors.\nSee Also\n--------\nset : Color codes can be set through the high-level seaborn style\nmanager.\nset_palette : Color codes can also be set through the function that\nsets the matplotlib color cycle.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "string",
          "default": "deep",
          "description": "类型从默认值推断: str"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.palettes.set_color_codes",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.palettes.xkcd_palette": {
    "name": "seaborn_palettes_xkcd_palette",
    "description": "Make a palette with color names from the xkcd color survey.\nSee xkcd for the full list of colors: https://xkcd.com/color/rgb/\nThis is just a simple wrapper around the `seaborn.xkcd_rgb` dictionary.\nParameters\n----------\ncolors : list of strings\nList of keys in the `seaborn.xkcd_rgb` dictionary.\nReturns\n-------\npalette\nA list of colors as RGB tuples.\nSee Also\n--------\ncrayon_palette : Make a palette with Crayola crayon colors.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "colors"
      ]
    },
    "metadata": {
      "source_function": "seaborn.palettes.xkcd_palette",
      "module": "seaborn.palettes",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.axes_style": {
    "name": "seaborn_rcmod_axes_style",
    "description": "Get the parameters that control the general style of the plots.\nThe style parameters control properties like the color of the background and\nwhether a grid is enabled by default. This is accomplished using the\nmatplotlib rcParams system.\nThe options are illustrated in the\n:doc:`aesthetics tutorial <../tutorial/aesthetics>`.\nThis function can also be used as a context manager to temporarily\nalter the global defaults. See :func:`set_theme` or :func:`set_style`\nto modify the global defaults for all plots.\nParameters\n----------\nstyle : None, dict, or one of {darkgrid, whitegrid, dark, white, ticks}\nA dictionary of parameters or the name of a preconfigured style.\nrc : dict, optional\nParameter mappings to override the values in the preset seaborn\nstyle dictionaries. This only updates parameters that are\nconsidered part of the style definition.\nExamples\n--------\n.. include:: ../docstrings/axes_style.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "style": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "rc": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.rcmod.axes_style",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.plotting_context": {
    "name": "seaborn_rcmod_plotting_context",
    "description": "Get the parameters that control the scaling of plot elements.\nThis affects things like the size of the labels, lines, and other elements\nof the plot, but not the overall style. This is accomplished using the\nmatplotlib rcParams system.\nThe base context is \"notebook\", and the other contexts are \"paper\", \"talk\",\nand \"poster\", which are version of the notebook parameters scaled by different\nvalues. Font elements can also be scaled independently of (but relative to)\nthe other values.\nThis function can also be used as a context manager to temporarily\nalter the global defaults. See :func:`set_theme` or :func:`set_context`\nto modify the global defaults for all plots.\nParameters\n----------\ncontext : None, dict, or one of {paper, notebook, talk, poster}\nA dictionary of parameters or the name of a preconfigured set.\nfont_scale : float, optional\nSeparate scaling factor to independently scale the size of the\nfont elements.\nrc : dict, optional\nParameter mappings to override the values in the preset seaborn\ncontext dictionaries. This only updates parameters that are\nconsidered part of the context definition.\nExamples\n--------\n.. include:: ../docstrings/plotting_context.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "类型从参数名推断: context"
        },
        "font_scale": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        },
        "rc": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.rcmod.plotting_context",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.reset_defaults": {
    "name": "seaborn_rcmod_reset_defaults",
    "description": "Restore all RC params to default settings.",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.rcmod.reset_defaults",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.reset_orig": {
    "name": "seaborn_rcmod_reset_orig",
    "description": "Restore all RC params to original settings (respects custom rc).",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.rcmod.reset_orig",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.set": {
    "name": "seaborn_rcmod_set",
    "description": "Alias for :func:`set_theme`, which is the preferred interface.\nThis function may be removed in the future.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "args",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.rcmod.set",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.set_context": {
    "name": "seaborn_rcmod_set_context",
    "description": "Set the parameters that control the scaling of plot elements.\nThis affects things like the size of the labels, lines, and other elements\nof the plot, but not the overall style. This is accomplished using the\nmatplotlib rcParams system.\nThe base context is \"notebook\", and the other contexts are \"paper\", \"talk\",\nand \"poster\", which are version of the notebook parameters scaled by different\nvalues. Font elements can also be scaled independently of (but relative to)\nthe other values.\nSee :func:`plotting_context` to get the parameter values.\nParameters\n----------\ncontext : dict, or one of {paper, notebook, talk, poster}\nA dictionary of parameters or the name of a preconfigured set.\nfont_scale : float, optional\nSeparate scaling factor to independently scale the size of the\nfont elements.\nrc : dict, optional\nParameter mappings to override the values in the preset seaborn\ncontext dictionaries. This only updates parameters that are\nconsidered part of the context definition.\nExamples\n--------\n.. include:: ../docstrings/set_context.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "类型从参数名推断: context"
        },
        "font_scale": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        },
        "rc": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.rcmod.set_context",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.set_palette": {
    "name": "seaborn_rcmod_set_palette",
    "description": "Set the matplotlib color cycle using a seaborn palette.\nParameters\n----------\npalette : seaborn color paltte | matplotlib colormap | hls | husl\nPalette definition. Should be something :func:`color_palette` can process.\nn_colors : int\nNumber of colors in the cycle. The default number of colors will depend\non the format of ``palette``, see the :func:`color_palette`\ndocumentation for more information.\ndesat : float\nProportion to desaturate each color by.\ncolor_codes : bool\nIf ``True`` and ``palette`` is a seaborn palette, remap the shorthand\ncolor codes (e.g. \"b\", \"g\", \"r\", etc.) to the colors from this palette.\nSee Also\n--------\ncolor_palette : build a color palette or set the color cycle temporarily\nin a ``with`` statement.\nset_context : set parameters to scale plot elements\nset_style : set the default parameters for figure style",
    "inputSchema": {
      "type": "object",
      "properties": {
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "n_colors": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "desat": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color_codes": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": [
        "palette"
      ]
    },
    "metadata": {
      "source_function": "seaborn.rcmod.set_palette",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.set_style": {
    "name": "seaborn_rcmod_set_style",
    "description": "Set the parameters that control the general style of the plots.\nThe style parameters control properties like the color of the background and\nwhether a grid is enabled by default. This is accomplished using the\nmatplotlib rcParams system.\nThe options are illustrated in the\n:doc:`aesthetics tutorial <../tutorial/aesthetics>`.\nSee :func:`axes_style` to get the parameter values.\nParameters\n----------\nstyle : dict, or one of {darkgrid, whitegrid, dark, white, ticks}\nA dictionary of parameters or the name of a preconfigured style.\nrc : dict, optional\nParameter mappings to override the values in the preset seaborn\nstyle dictionaries. This only updates parameters that are\nconsidered part of the style definition.\nExamples\n--------\n.. include:: ../docstrings/set_style.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "style": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "rc": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.rcmod.set_style",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.rcmod.set_theme": {
    "name": "seaborn_rcmod_set_theme",
    "description": "Set aspects of the visual theme for all matplotlib and seaborn plots.\nThis function changes the global defaults for all plots using the\nmatplotlib rcParams system. The themeing is decomposed into several distinct\nsets of parameter values.\nThe options are illustrated in the :doc:`aesthetics <../tutorial/aesthetics>`\nand :doc:`color palette <../tutorial/color_palettes>` tutorials.\nParameters\n----------\ncontext : string or dict\nScaling parameters, see :func:`plotting_context`.\nstyle : string or dict\nAxes style parameters, see :func:`axes_style`.\npalette : string or sequence\nColor palette, see :func:`color_palette`.\nfont : string\nFont family, see matplotlib font manager.\nfont_scale : float, optional\nSeparate scaling factor to independently scale the size of the\nfont elements.\ncolor_codes : bool\nIf ``True`` and ``palette`` is a seaborn palette, remap the shorthand\ncolor codes (e.g. \"b\", \"g\", \"r\", etc.) to the colors from this palette.\nrc : dict or None\nDictionary of rc parameter mappings to override the above.\nExamples\n--------\n.. include:: ../docstrings/set_theme.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "default": "notebook",
          "description": "类型从默认值推断: str"
        },
        "style": {
          "type": "string",
          "default": "darkgrid",
          "description": "类型从默认值推断: str"
        },
        "palette": {
          "type": "string",
          "default": "deep",
          "description": "类型从默认值推断: str"
        },
        "font": {
          "type": "string",
          "default": "sans-serif",
          "description": "类型从默认值推断: str"
        },
        "font_scale": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        },
        "color_codes": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "rc": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.rcmod.set_theme",
      "module": "seaborn.rcmod",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.regression.residplot": {
    "name": "seaborn_regression_residplot",
    "description": "Plot the residuals of a linear regression.\nThis function will regress y on x (possibly as a robust or polynomial\nregression) and then draw a scatterplot of the residuals. You can\noptionally fit a lowess smoother to the residual plot, which can\nhelp in determining if there is structure to the residuals.\nParameters\n----------\ndata : DataFrame, optional\nDataFrame to use if `x` and `y` are column names.\nx : vector or string\nData or column name in `data` for the predictor variable.\ny : vector or string\nData or column name in `data` for the response variable.\n{x, y}_partial : vectors or string(s) , optional\nThese variables are treated as confounding and are removed from\nthe `x` or `y` variables before plotting.\nlowess : boolean, optional\nFit a lowess smoother to the residual scatterplot.\norder : int, optional\nOrder of the polynomial to fit when calculating the residuals.\nrobust : boolean, optional\nFit a robust linear regression when calculating the residuals.\ndropna : boolean, optional\nIf True, ignore observations with missing data when fitting and\nplotting.\nlabel : string, optional\nLabel that will be used in any plot legends.\ncolor : matplotlib color, optional\nColor to use for all elements of the plot.\n{scatter, line}_kws : dictionaries, optional\nAdditional keyword arguments passed to scatter() and plot() for drawing\nthe components of the plot.\nax : matplotlib axis, optional\nPlot into this axis, otherwise grab the current axis or make a new\none if not existing.\nReturns\n-------\nax: matplotlib axes\nAxes with the regression plot.\nSee Also\n--------\nregplot : Plot a simple linear regression model.\njointplot : Draw a :func:`residplot` with univariate marginal distributions\n(when used with ``kind=\"resid\"``).\nExamples\n--------\n.. include:: ../docstrings/residplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "x_partial": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y_partial": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "lowess": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "order": {
          "type": "integer",
          "default": 1,
          "description": "类型从默认值推断: int"
        },
        "robust": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "dropna": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "label": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "scatter_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "line_kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.regression.residplot",
      "module": "seaborn.regression",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.relational.scatterplot": {
    "name": "seaborn_relational_scatterplot",
    "description": "Draw a scatter plot with possibility of several semantic groupings.\nThe relationship between `x` and `y` can be shown for different subsets\nof the data using the `hue`, `size`, and `style` parameters. These\nparameters control what visual semantics are used to identify the different\nsubsets. It is possible to show up to three dimensions independently by\nusing all three semantic types, but this style of plot can be hard to\ninterpret and is often ineffective. Using redundant semantics (i.e. both\n`hue` and `style` for the same variable) can be helpful for making\ngraphics more accessible.\nSee the :ref:`tutorial <relational_tutorial>` for more information.\nThe default treatment of the `hue` (and to a lesser extent, `size`)\nsemantic, if present, depends on whether the variable is inferred to\nrepresent \"numeric\" or \"categorical\" data. In particular, numeric variables\nare represented with a sequential colormap by default, and the legend\nentries show regular \"ticks\" with values that may or may not exist in the\ndata. This behavior can be controlled through various parameters, as\ndescribed and illustrated below.\nParameters\n----------\ndata : :class:`pandas.DataFrame`, :class:`numpy.ndarray`, mapping, or sequence\nInput data structure. Either a long-form collection of vectors that can be\nassigned to named variables or a wide-form dataset that will be internally\nreshaped.\nx, y : vectors or keys in ``data``\nVariables that specify positions on the x and y axes.\nhue : vector or key in `data`\nGrouping variable that will produce points with different colors.\nCan be either categorical or numeric, although color mapping will\nbehave differently in latter case.\nsize : vector or key in `data`\nGrouping variable that will produce points with different sizes.\nCan be either categorical or numeric, although size mapping will\nbehave differently in latter case.\nstyle : vector or key in `data`\nGrouping variable that will produce points with different markers.\nCan have a numeric dtype but will always be treated as categorical.\npalette : string, list, dict, or :class:`matplotlib.colors.Colormap`\nMethod for choosing the colors to use when mapping the ``hue`` semantic.\nString values are passed to :func:`color_palette`. List or dict values\nimply categorical mapping, while a colormap object implies numeric mapping.\nhue_order : vector of strings\nSpecify the order of processing and plotting for categorical levels of the\n``hue`` semantic.\nhue_norm : tuple or :class:`matplotlib.colors.Normalize`\nEither a pair of values that set the normalization range in data units\nor an object that will map from data units into a [0, 1] interval. Usage\nimplies numeric mapping.\nsizes : list, dict, or tuple\nAn object that determines how sizes are chosen when `size` is used.\nList or dict arguments should provide a size for each unique data value,\nwhich forces a categorical interpretation. The argument may also be a\nmin, max tuple.\nsize_order : list\nSpecified order for appearance of the `size` variable levels,\notherwise they are determined from the data. Not relevant when the\n`size` variable is numeric.\nsize_norm : tuple or Normalize object\nNormalization in data units for scaling plot objects when the\n`size` variable is numeric.\nmarkers : boolean, list, or dictionary\nObject determining how to draw the markers for different levels of the\n`style` variable. Setting to `True` will use default markers, or\nyou can pass a list of markers or a dictionary mapping levels of the\n`style` variable to markers. Setting to `False` will draw\nmarker-less lines.  Markers are specified as in matplotlib.\nstyle_order : list\nSpecified order for appearance of the `style` variable levels\notherwise they are determined from the data. Not relevant when the\n`style` variable is numeric.\nlegend : \"auto\", \"brief\", \"full\", or False\nHow to draw the legend. If \"brief\", numeric `hue` and `size`\nvariables will be represented with a sample of evenly spaced values.\nIf \"full\", every group will get an entry in the legend. If \"auto\",\nchoose between brief or full representation based on number of levels.\nIf `False`, no legend data is added and no legend is drawn.\nax : :class:`matplotlib.axes.Axes`\nPre-existing axes for the plot. Otherwise, call :func:`matplotlib.pyplot.gca`\ninternally.\nkwargs : key, value mappings\nOther keyword arguments are passed down to\n:meth:`matplotlib.axes.Axes.scatter`.\nReturns\n-------\n:class:`matplotlib.axes.Axes`\nThe matplotlib axes containing the plot.\nSee Also\n--------\nlineplot : Plot data using lines.\nstripplot : Plot a categorical scatter with jitter.\nswarmplot : Plot a categorical scatter with non-overlapping points.\nExamples\n--------\n.. include:: ../docstrings/scatterplot.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "description": "类型从参数名推断: data"
        },
        "x": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "y": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "size": {
          "type": "integer",
          "description": "类型从参数名推断: size"
        },
        "style": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "palette": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "hue_norm": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "sizes": {
          "type": "integer",
          "description": "类型从参数名推断: sizes"
        },
        "size_order": {
          "type": "integer",
          "description": "类型从参数名推断: size_order"
        },
        "size_norm": {
          "type": "integer",
          "description": "类型从参数名推断: size_norm"
        },
        "markers": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "style_order": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "legend": {
          "type": "string",
          "default": "auto",
          "description": "类型从默认值推断: str"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.relational.scatterplot",
      "module": "seaborn.relational",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.adjust_legend_subtitles": {
    "name": "seaborn_utils_adjust_legend_subtitles",
    "description": "Make invisible-handle \"subtitles\" entries look more like titles.\n\nNote: This function is not part of the public API and may be changed or removed.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "legend": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "legend"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.adjust_legend_subtitles",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.axes_ticklabels_overlap": {
    "name": "seaborn_utils_axes_ticklabels_overlap",
    "description": "Return booleans for whether the x and y ticklabels on an Axes overlap.\nParameters\n----------\nax : matplotlib Axes\nReturns\n-------\nx_overlap, y_overlap : booleans\nTrue when the labels on that axis overlap.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "ax"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.axes_ticklabels_overlap",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.axis_ticklabels_overlap": {
    "name": "seaborn_utils_axis_ticklabels_overlap",
    "description": "Return a boolean for whether the list of ticklabels have overlaps.\nParameters\n----------\nlabels : list of matplotlib ticklabels\nReturns\n-------\noverlap : boolean\nTrue if any of the labels overlap.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "labels"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.axis_ticklabels_overlap",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.axlabel": {
    "name": "seaborn_utils_axlabel",
    "description": "Grab current axis and label it.\nDEPRECATED: will be removed in a future version.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "xlabel": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "ylabel": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "xlabel",
        "ylabel",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.axlabel",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.ci": {
    "name": "seaborn_utils_ci",
    "description": "Return a percentile range from an array of values.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "a": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "which": {
          "type": "integer",
          "default": 95,
          "description": "类型从默认值推断: int"
        },
        "axis": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "a"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.ci",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.ci_to_errsize": {
    "name": "seaborn_utils_ci_to_errsize",
    "description": "Convert intervals to error arguments relative to plot heights.\nParameters\n----------\ncis : 2 x n sequence\nsequence of confidence interval limits\nheights : n sequence\nsequence of plot heights\nReturns\n-------\nerrsize : 2 x n array\nsequence of error size relative to height values in correct\nformat as argument for plt.bar",
    "inputSchema": {
      "type": "object",
      "properties": {
        "cis": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "heights": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "cis",
        "heights"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.ci_to_errsize",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.desaturate": {
    "name": "seaborn_utils_desaturate",
    "description": "Decrease the saturation channel of a color by some percent.\nParameters\n----------\ncolor : matplotlib color\nhex, rgb-tuple, or html color name\nprop : float\nsaturation channel of color will be multiplied by this value\nReturns\n-------\nnew_color : rgb tuple\ndesaturated color code in RGB tuple representation",
    "inputSchema": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "prop": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "color",
        "prop"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.desaturate",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.despine": {
    "name": "seaborn_utils_despine",
    "description": "Remove the top and right spines from plot(s).\nfig : matplotlib figure, optional\nFigure to despine all axes of, defaults to the current figure.\nax : matplotlib axes, optional\nSpecific axes object to despine. Ignored if fig is provided.\ntop, right, left, bottom : boolean, optional\nIf True, remove that spine.\noffset : int or dict, optional\nAbsolute distance, in points, spines should be moved away\nfrom the axes (negative values move spines inward). A single value\napplies to all spines; a dict can be used to set offset values per\nside.\ntrim : bool, optional\nIf True, limit spines to the smallest and largest major tick\non each non-despined axis.\nReturns\n-------\nNone",
    "inputSchema": {
      "type": "object",
      "properties": {
        "fig": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "ax": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "top": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "right": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "left": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "bottom": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        },
        "offset": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "trim": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.utils.despine",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.get_color_cycle": {
    "name": "seaborn_utils_get_color_cycle",
    "description": "Return the list of colors in the current matplotlib color cycle\nParameters\n----------\nNone\nReturns\n-------\ncolors : list\nList of matplotlib colors in the current cycle, or dark gray if\nthe current color cycle is empty.",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.utils.get_color_cycle",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.get_data_home": {
    "name": "seaborn_utils_get_data_home",
    "description": "Return a path to the cache directory for example datasets.\nThis directory is used by :func:`load_dataset`.\nIf the ``data_home`` argument is not provided, it will use a directory\nspecified by the `SEABORN_DATA` environment variable (if it exists)\nor otherwise default to an OS-appropriate user cache location.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data_home": {
          "type": "object",
          "description": "类型从参数名推断: data_home"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.utils.get_data_home",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.get_dataset_names": {
    "name": "seaborn_utils_get_dataset_names",
    "description": "Report available example datasets, useful for reporting issues.\nRequires an internet connection.",
    "inputSchema": {
      "type": "object",
      "properties": {},
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.utils.get_dataset_names",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.load_dataset": {
    "name": "seaborn_utils_load_dataset",
    "description": "Load an example dataset from the online repository (requires internet).\nThis function provides quick access to a small number of example datasets\nthat are useful for documenting seaborn or generating reproducible examples\nfor bug reports. It is not necessary for normal usage.\nNote that some of the datasets have a small amount of preprocessing applied\nto define a proper ordering for categorical variables.\nUse :func:`get_dataset_names` to see a list of available datasets.\nParameters\n----------\nname : str\nName of the dataset (``{name}.csv`` on\nhttps://github.com/mwaskom/seaborn-data).\ncache : boolean, optional\nIf True, try to load from the local cache first, and save to the cache\nif a download is required.\ndata_home : string, optional\nThe directory in which to cache data; see :func:`get_data_home`.\nkws : keys and values, optional\nAdditional keyword arguments are passed to passed through to\n:func:`pandas.read_csv`.\nReturns\n-------\ndf : :class:`pandas.DataFrame`\nTabular data, possibly with some preprocessing applied.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "类型从参数名推断: name"
        },
        "cache": {
          "type": "integer",
          "default": true,
          "description": "类型从默认值推断: bool"
        },
        "data_home": {
          "type": "object",
          "description": "类型从参数名推断: data_home"
        },
        "kws": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "name",
        "kws"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.load_dataset",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.locator_to_legend_entries": {
    "name": "seaborn_utils_locator_to_legend_entries",
    "description": "Return levels and formatted levels for brief numeric legends.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "locator": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "limits": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "dtype": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "locator",
        "limits",
        "dtype"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.locator_to_legend_entries",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.move_legend": {
    "name": "seaborn_utils_move_legend",
    "description": "Recreate a plot's legend at a new location.\nThe name is a slight misnomer. Matplotlib legends do not expose public\ncontrol over their position parameters. So this function creates a new legend,\ncopying over the data from the original object, which is then removed.\nParameters\n----------\nobj : the object with the plot\nThis argument can be either a seaborn or matplotlib object:\n- :class:`seaborn.FacetGrid` or :class:`seaborn.PairGrid`\n- :class:`matplotlib.axes.Axes` or :class:`matplotlib.figure.Figure`\nloc : str or int\nLocation argument, as in :meth:`matplotlib.axes.Axes.legend`.\nkwargs\nOther keyword arguments are passed to :meth:`matplotlib.axes.Axes.legend`.\nExamples\n--------\n.. include:: ../docstrings/move_legend.rst",
    "inputSchema": {
      "type": "object",
      "properties": {
        "obj": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "loc": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "kwargs": {
          "type": "object",
          "description": "类型从参数名推断: kwargs"
        }
      },
      "required": [
        "obj",
        "loc",
        "kwargs"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.move_legend",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.relative_luminance": {
    "name": "seaborn_utils_relative_luminance",
    "description": "Calculate the relative luminance of a color according to W3C standards\nParameters\n----------\ncolor : matplotlib color or sequence of matplotlib colors\nHex code, rgb-tuple, or html color name.\nReturns\n-------\nluminance : float(s) between 0 and 1",
    "inputSchema": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "color"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.relative_luminance",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.remove_na": {
    "name": "seaborn_utils_remove_na",
    "description": "Helper method for removing null values from data vectors.\nParameters\n----------\nvector : vector object\nMust implement boolean masking with [] subscript syntax.\nReturns\n-------\nclean_clean : same type as ``vector``\nVector of data with null values removed. May be a copy or a view.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "vector": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "vector"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.remove_na",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.saturate": {
    "name": "seaborn_utils_saturate",
    "description": "Return a fully saturated color with the same hue.\nParameters\n----------\ncolor : matplotlib color\nhex, rgb-tuple, or html color name\nReturns\n-------\nnew_color : rgb tuple\nsaturated color code in RGB tuple representation",
    "inputSchema": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "color"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.saturate",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.set_hls_values": {
    "name": "seaborn_utils_set_hls_values",
    "description": "Independently manipulate the h, l, or s channels of a color.\nParameters\n----------\ncolor : matplotlib color\nhex, rgb-tuple, or html color name\nh, l, s : floats between 0 and 1, or None\nnew values for each channel in hls space\nReturns\n-------\nnew_color : rgb tuple\nnew color code in RGB tuple representation",
    "inputSchema": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "h": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "l": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        },
        "s": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "color"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.set_hls_values",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.utils.to_utf8": {
    "name": "seaborn_utils_to_utf8",
    "description": "Return a string representing a Python object.\nStrings (i.e. type ``str``) are returned unchanged.\nByte strings (i.e. type ``bytes``) are returned as UTF-8-decoded strings.\nFor other objects, the method ``__str__()`` is called, and the result is\nreturned as a string.\nParameters\n----------\nobj : object\nAny Python object\nReturns\n-------\ns : str\nUTF-8-decoded string representation of ``obj``",
    "inputSchema": {
      "type": "object",
      "properties": {
        "obj": {
          "type": "string",
          "description": "未知类型，默认为字符串"
        }
      },
      "required": [
        "obj"
      ]
    },
    "metadata": {
      "source_function": "seaborn.utils.to_utf8",
      "module": "seaborn.utils",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.widgets.choose_colorbrewer_palette": {
    "name": "seaborn_widgets_choose_colorbrewer_palette",
    "description": "Select a palette from the ColorBrewer set.\nThese palettes are built into matplotlib and can be used by name in\nmany seaborn functions, or by passing the object returned by this function.\nParameters\n----------\ndata_type : {'sequential', 'diverging', 'qualitative'}\nThis describes the kind of data you want to visualize. See the seaborn\ncolor palette docs for more information about how to choose this value.\nNote that you can pass substrings (e.g. 'q' for 'qualitative.\nas_cmap : bool\nIf True, the return value is a matplotlib colormap rather than a\nlist of discrete colors.\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\nObject that can be passed to plotting functions.\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\ndiverging_palette : Create a diverging palette from selected colors.\ncubehelix_palette : Create a sequential palette or colormap using the\ncubehelix system.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "data_type": {
          "type": "object",
          "description": "类型从参数名推断: data_type"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": [
        "data_type"
      ]
    },
    "metadata": {
      "source_function": "seaborn.widgets.choose_colorbrewer_palette",
      "module": "seaborn.widgets",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.widgets.choose_cubehelix_palette": {
    "name": "seaborn_widgets_choose_cubehelix_palette",
    "description": "Launch an interactive widget to create a sequential cubehelix palette.\nThis corresponds with the :func:`cubehelix_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values. The cubehelix system allows the\npalette to have more hue variance across the range, which can be helpful\nfor distinguishing a wider range of values.\nRequires IPython 2+ and must be used in the notebook.\nParameters\n----------\nas_cmap : bool\nIf True, the return value is a matplotlib colormap rather than a\nlist of discrete colors.\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\nObject that can be passed to plotting functions.\nSee Also\n--------\ncubehelix_palette : Create a sequential palette or colormap using the\ncubehelix system.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.widgets.choose_cubehelix_palette",
      "module": "seaborn.widgets",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.widgets.choose_dark_palette": {
    "name": "seaborn_widgets_choose_dark_palette",
    "description": "Launch an interactive widget to create a dark sequential palette.\nThis corresponds with the :func:`dark_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values.\nRequires IPython 2+ and must be used in the notebook.\nParameters\n----------\ninput : {'husl', 'hls', 'rgb'}\nColor space for defining the seed value. Note that the default is\ndifferent than the default input for :func:`dark_palette`.\nas_cmap : bool\nIf True, the return value is a matplotlib colormap rather than a\nlist of discrete colors.\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\nObject that can be passed to plotting functions.\nSee Also\n--------\ndark_palette : Create a sequential palette with dark low values.\nlight_palette : Create a sequential palette with bright low values.\ncubehelix_palette : Create a sequential palette or colormap using the\ncubehelix system.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "input": {
          "type": "string",
          "default": "husl",
          "description": "类型从默认值推断: str"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.widgets.choose_dark_palette",
      "module": "seaborn.widgets",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.widgets.choose_diverging_palette": {
    "name": "seaborn_widgets_choose_diverging_palette",
    "description": "Launch an interactive widget to choose a diverging color palette.\nThis corresponds with the :func:`diverging_palette` function. This kind\nof palette is good for data that range between interesting low values\nand interesting high values with a meaningful midpoint. (For example,\nchange scores relative to some baseline value).\nRequires IPython 2+ and must be used in the notebook.\nParameters\n----------\nas_cmap : bool\nIf True, the return value is a matplotlib colormap rather than a\nlist of discrete colors.\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\nObject that can be passed to plotting functions.\nSee Also\n--------\ndiverging_palette : Create a diverging color palette or colormap.\nchoose_colorbrewer_palette : Interactively choose palettes from the\ncolorbrewer set, including diverging palettes.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.widgets.choose_diverging_palette",
      "module": "seaborn.widgets",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  },
  "seaborn.widgets.choose_light_palette": {
    "name": "seaborn_widgets_choose_light_palette",
    "description": "Launch an interactive widget to create a light sequential palette.\nThis corresponds with the :func:`light_palette` function. This kind\nof palette is good for data that range between relatively uninteresting\nlow values and interesting high values.\nRequires IPython 2+ and must be used in the notebook.\nParameters\n----------\ninput : {'husl', 'hls', 'rgb'}\nColor space for defining the seed value. Note that the default is\ndifferent than the default input for :func:`light_palette`.\nas_cmap : bool\nIf True, the return value is a matplotlib colormap rather than a\nlist of discrete colors.\nReturns\n-------\npal or cmap : list of colors or matplotlib colormap\nObject that can be passed to plotting functions.\nSee Also\n--------\nlight_palette : Create a sequential palette with bright low values.\ndark_palette : Create a sequential palette with dark low values.\ncubehelix_palette : Create a sequential palette or colormap using the\ncubehelix system.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "input": {
          "type": "string",
          "default": "husl",
          "description": "类型从默认值推断: str"
        },
        "as_cmap": {
          "type": "integer",
          "default": false,
          "description": "类型从默认值推断: bool"
        }
      },
      "required": []
    },
    "metadata": {
      "source_function": "seaborn.widgets.choose_light_palette",
      "module": "seaborn.widgets",
      "class_name": null,
      "is_async": false,
      "is_static": false,
      "is_classmethod": false
    }
  }
}